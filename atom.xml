<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>半亩方塘</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-10-25T05:03:58.454Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>舒窈</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>银老板家的电梯</title>
    <link href="http://example.com/2021/10/25/%E5%85%B3%E4%BA%8EBFS%E7%9A%84%E4%BE%8B%E9%A2%98/"/>
    <id>http://example.com/2021/10/25/%E5%85%B3%E4%BA%8EBFS%E7%9A%84%E4%BE%8B%E9%A2%98/</id>
    <published>2021-10-25T04:37:47.000Z</published>
    <updated>2021-10-25T05:03:58.454Z</updated>
    
    <content type="html"><![CDATA[<p>题目描述</p><p>众所周知银老板是喀兰贸易的老大，银老板家也很有钱，上下楼都要用电梯，但是电梯里面没有按钮，电梯外面有上和下，按上你就会上升mi层，按下你就会下降mi层，即到达i+mi层或者i-mi层，i是你的当前楼层。现在银老板在p层，他想要去t层，请你帮帮银老板他最少需要按多少下按钮可以到达目的地。说不定他就来到你岛了呢？如果你还没有理解题意的话好吧我就举个例子：比如银老板在第2层，想要去第5层，且m依次为4,1,2,3,4;则他最少需要按2次（连续按2次上或者先按1次下再按1次上）才能到达目的地。（楼层&gt;=1）</p><p>输入<br>第一行一个n,p,t（1&lt;=n,p,t&lt;=200）</p><p>第二行n个整数m1,m2…….mn;（0&lt;=mi&lt;=50）</p><p>输出<br>一个整数表示从p层到t层最少需要按多少次。如果不能到达输出-1。</p><p>输入样例 1<br>5 2 5<br>4 1 2 3 4</p><p>输出样例 1<br>2</p><p>输入样例 2<br>6 3 2<br>1 2 3 4 5 6</p><p>输出样例 2<br>-1</p><p>解题思路</p><p>根据题意可知，每层楼对应的下一层选项最多有两个，所以我们采用二维数组来存储每一层的一些信息。再来采用BFS算法，在使用BFS算法时我们需要一个队列，对于已经入队的楼层，我们先检查它是否是我们要达到的楼层，若不是则出列，并且将它的下一层入队，是则直接输出该楼层的循环次数。</p><p>源码</p><p>#include<iostream><br>#include<algorithm><br>#include<queue><br>#include<cstring><br>using namespace std;<br>const int MAXSIZE=201;<br>int n,s,e;<br>int floor[MAXSIZE][2];<br>struct info{<br>    int pos;<br>    int time;<br>};<br>queue<info> q;<br>int path(){<br>    info now,next,tmp;<br>    tmp.pos=s;<br>    tmp.time=0;<br>    q.push(tmp);<br>    if(s&lt;1||s&gt;MAXSIZE||e&lt;1||e&gt;MAXSIZE){<br>        return -1;<br>    }<br>    while(!q.empty()){<br>        now=q.front();<br>        if(now.pos==e){<br>            return now.time;<br>        }<br>        q.pop();<br>        int up=floor[now.pos][0];<br>        int down=floor[now.pos][1];<br>        if(up!=-1){<br>            next.pos=up;<br>            next.time=now.time+1;<br>            q.push(next);<br>        }<br>        if(down!=-1){<br>            next.pos=down;<br>            next.time=now.time+1;<br>            q.push(next);<br>        }<br>    }<br>    return -1;<br>}<br>int main(){<br>    cin&gt;&gt;n;<br>    memset(floor,-1,sizeof(floor));<br>    cin&gt;&gt;s&gt;&gt;e;<br>    for(int i=1;i&lt;=n;i++){<br>        int t;<br>        cin&gt;&gt;t;<br>        if(i+t&lt;=n){<br>            floor[i][0]=i+t;<br>        }<br>        if(i-t&gt;0){<br>            floor[i][1]=i-t;<br>        }<br>    }<br>    cout&lt;&lt;path();<br>}</p><p>问题</p><p>由于我是用结构体作为队列的元素，导致我代码的空间复杂度很高，在oj上跑的时候占用空间超出范围了，不让我过。于是我又换了一种思路。</p><p>解题思路</p><p>现在我只用一个一维数组来存储信息，数组下标代表层数，对应下标所指的数代表它与下一层的差，然后再用一个同样大小的布尔类型一维数组来存储我是否已经到过这了，其他判断条件和第一次类似。</p><p>源码</p><p>#include<iostream><br>#include<algorithm><br>using namespace std;<br>const int N=220;<br>int num[N];<br>bool re[N];<br>int n,b=99999,a=0,p,t;<br>void go(int k,int a)<br>{<br>    if(k==t) b=a;<br>if(a&gt;=b) return;<br>if(!re[k+num[k]]&amp;&amp;k+num[k]&lt;=n) {<br>    re[k+num[k]]=true;<br>    a++;<br>    go(k+num[k],a);<br>    a–;<br>    re[k+num[k]]=false;<br>}</p><p>if(!re[k-num[k]]&amp;&amp;k-num[k]&gt;0) {<br>    re[k-num[k]]=true;<br>    a++;<br>    go(k-num[k],a);<br>    re[k-num[k]]=false;<br>a–;<br>}</p><p>}<br>int main()<br>{<br>    cin&gt;&gt;n&gt;&gt;p&gt;&gt;t;<br>    for(int i=1;i&lt;=n;i++)<br>    cin&gt;&gt;num[i];<br>    re[p]=true;<br>    go(p,0);<br>    if(b==99999)<br>     cout&lt;&lt;-1&lt;&lt;endl;<br>  else<br>      cout&lt;&lt;b&lt;&lt;endl;<br>}</p><p>问题</p><p>现在最操蛋的事情发生了，tmd这次又是代码运行超时，还是不让过，我不能李姐，这会超时？希望知道解法的大佬指导一下，谢谢。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;题目描述&lt;/p&gt;
&lt;p&gt;众所周知银老板是喀兰贸易的老大，银老板家也很有钱，上下楼都要用电梯，但是电梯里面没有按钮，电梯外面有上和下，按上你就会上升mi层，按下你就会下降mi层，即到达i+mi层或者i-mi层，i是你的当前楼层。现在银老板在p层，他想要去t层，请你帮帮银老板他</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>My first blog</title>
    <link href="http://example.com/2021/10/24/My-first-blog/"/>
    <id>http://example.com/2021/10/24/My-first-blog/</id>
    <published>2021-10-24T10:44:47.000Z</published>
    <updated>2021-10-25T03:21:21.737Z</updated>
    
    <content type="html"><![CDATA[<p>恍恍惚惚，现在都大二了，我开始意识到了对于学计算机的，写博客是多么的重要，于是就有了这个网站，希望能和大家一起学习。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;恍恍惚惚，现在都大二了，我开始意识到了对于学计算机的，写博客是多么的重要，于是就有了这个网站，希望能和大家一起学习。&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2021/10/24/hello-world/"/>
    <id>http://example.com/2021/10/24/hello-world/</id>
    <published>2021-10-24T09:02:46.451Z</published>
    <updated>1985-10-26T08:15:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
