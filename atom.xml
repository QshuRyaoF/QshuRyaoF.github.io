<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>半亩方塘</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-11-30T03:31:15.844Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>舒窈</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>最短路径——迪杰斯特拉（Dijkstra)算法</title>
    <link href="http://example.com/2021/11/30/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84-%E8%BF%AA%E6%9D%B0%E6%96%AF%E7%89%B9%E6%8B%89%E7%AE%97%E6%B3%95/"/>
    <id>http://example.com/2021/11/30/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84-%E8%BF%AA%E6%9D%B0%E6%96%AF%E7%89%B9%E6%8B%89%E7%AE%97%E6%B3%95/</id>
    <published>2021-11-30T02:58:58.000Z</published>
    <updated>2021-11-30T03:31:15.844Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>马上新一轮的ACM考核就要来了，而这一次的考核内容包括了弗洛伊德算法，而由于弗洛伊德算法是由迪杰斯特拉算法改进而得到的，所以准备先复习这个算法，然后随便找道题写一下。</p><h2 id="旅游规划"><a href="#旅游规划" class="headerlink" title="旅游规划"></a>旅游规划</h2><p>有了一张自驾旅游路线图，你会知道城市间的高速公路长度、以及该公路要收取的过路费。现在需要你写一个程序，帮助前来咨询的游客找一条出发地和目的地之间的最短路径。如果有若干条路径都是最短的，那么需要输出最便宜的一条路径。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h3><p>输入说明：输入数据的第1行给出4个正整数<em>N</em>、<em>M</em>、<em>S</em>、<em>D</em>，其中<em>N</em>（2≤<em>N</em>≤500）是城市的个数，顺便假设城市的编号为0~(<em>N</em>−1)；<em>M</em>是高速公路的条数；<em>S</em>是出发地的城市编号；<em>D</em>是目的地的城市编号。随后的<em>M</em>行中，每行给出一条高速公路的信息，分别是：城市1、城市2、高速公路长度、收费额，中间用空格分开，数字均为整数且不超过500。输入保证解的存在。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h3><p>在一行里输出路径的长度和收费总额，数字间以空格分隔，输出结尾不能有多余空格。</p><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h3><pre><code class="in">4 5 0 30 1 1 201 3 2 300 3 4 100 2 2 202 3 1 20结尾无空行</code></pre><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h3><pre><code class="out">3 40结尾无空行</code></pre><h2 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h2><ul><li>首先，选定一个点v 0 v0v0，先假设所有的点到某个点的路径都是无穷（当然自己到自己肯定得是长度是0…）。</li><li>然后确定一个集合S SS，这集合表示已经被访问的过点。（那么没有被访问过的点，也是很容易解决的…），这里用个bool数组什么的标记一下吧。</li><li>之后，先更新所有点到这个v 0 v0v0的距离。怎么更新呢？</li><li>所有点通过已经被访问过的点到达v 0 v0v0的距离，在结合d ( v 0 , v i ) = m i n v j ∈ ( S ) ( d ( v 0 , v j ) + w ( v j , v i ) ) d(v0, vi) = min_{vj \in (S)}(d(v0, vj) + w(vj, vi))d(v0,vi)=min vj∈(S)(d(v0,vj)+w(vj,vi)) ( 一般就是新增加的那个点考虑下就好了 )。就是在中间搭一个桥，如果，通过这个桥的点会让这个路变得更近，就更新这个路径的长度。</li><li>然后选个最近的点，然后把这个最近的点标记访问过。纳入到集合S SS</li><li>然后，一直到把所有的点都纳入进去之后，就没什么事情了~</li></ul><p>是不是感觉直接看不懂？小问题，我将通过借助此题来解释其原理。<br>首先我们画出这个旅游图：</p><p><img src="https://cdn.jsdelivr.net/gh/QshuRyaoF/MyPictureBed@master/img/image-20211130111303127.png" alt="image-20211130111303127"></p><p>这里我们需要注意这是高速公路，是双向的。<br>这个算法的目的是算出一个节点到其他所有节点的最短路径，所以我们首先就需要一个大小为节点数的一维数组来存储最短路径的值。如<strong>Path[4]={0,1,2,4}<strong>，这里我们先存储能直接到达的，不能到达就用正无穷表示，而出发地自然用0表示。然后我们还需要一个bool数组来存储是否算出了最短路径。初始化后的</strong>arrived[4]={true,false,false,false}<strong>，然后我们找出没达到过的里面的最短的路径，明显是节点1，并将其置为已到达过即为arrived[4]={true,true,false,false}，</strong>然后遍历节点1所能到达的所有节点，并把权重相加后与原始Path里的最短路径相比较，然后比它小，就更新它</strong>，第一次比较后：**Path[4]={0,1,2,3}**，直到所有节点都访问过，这样我们就得到了所有的最短路径。</p><h3 id="源码："><a href="#源码：" class="headerlink" title="源码："></a>源码：</h3><pre><code class="c++">#include&lt;iostream&gt;#include&lt;cstring&gt;const int N=500;const int INf=999999;//代表正无穷int map[N][N][2];//同时存储路径长度和费用using namespace std;int answer[2];//结果int n;void minpath(int s,int e)&#123;    int dis[n][2],t=INf,flag;    bool arrived[n];    memset(arrived,false,sizeof(arrived));    memset(dis,INf,sizeof(dis));    arrived[s]=true;    //初始化最短路径    for(int i=0;i&lt;n;i++)&#123;        dis[i][0]=map[s][i][0];        dis[i][1]=map[s][i][1];    &#125;    dis[s][0]=0;dis[s][1]=0;    for(int i=0;i&lt;n;i++)&#123;        flag=0;t=INf;        for(int j=0;j&lt;n;j++)&#123;            if(!arrived[j]&amp;&amp;dis[j][0]&lt;t)&#123;                t=dis[j][0];                flag=j;            &#125;        &#125;        arrived[flag]=true;        for(int j=0;j&lt;n;j++)&#123;            if(!arrived[j]&amp;&amp;dis[flag][0]+map[flag][j][0]&lt;dis[j][0])&#123;                dis[j][0]=dis[flag][0]+map[flag][j][0];                dis[j][1]=dis[flag][1]+map[flag][j][1];            &#125;else if(!arrived[j]&amp;&amp;dis[flag][0]+map[flag][j][0]==dis[j][0]&amp;&amp;dis[flag][1]+map[flag][j][1]&lt;dis[j][1])&#123;//取费用最小的                dis[j][1]=dis[flag][1]+map[flag][j][1];            &#125;        &#125;    &#125;    //得出结果    answer[0]=dis[e][0];    answer[1]=dis[e][1];&#125;int main()&#123;    int m,start,end,s,d,v,p;    cin&gt;&gt;n&gt;&gt;m&gt;&gt;start&gt;&gt;end;    //初始化地图    for(int i=0;i&lt;n;i++)&#123;        for(int j=0;j&lt;n;j++)&#123;            if(i==j)&#123;                map[i][j][0]=0;                map[i][j][1]=0;            &#125;else&#123;                map[i][j][0]=INf;                map[i][j][1]=INf;            &#125;        &#125;    &#125;    //录入地图    for(int i=0;i&lt;m;i++)&#123;        cin&gt;&gt;s&gt;&gt;d&gt;&gt;v&gt;&gt;p;        map[s][d][0]=v;        map[s][d][1]=p;        map[d][s][0]=v;        map[d][s][1]=p;    &#125;    minpath(start,end);    cout&lt;&lt;answer[0]&lt;&lt;&quot; &quot;&lt;&lt;answer[1];    return 0;&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h2&gt;&lt;p&gt;马上新一轮的ACM考核就要来了，而这一次的考核内容包括了弗洛伊德算法，而由于弗洛伊德算法是由迪杰斯特拉算法改进而得到的，所以准备先复</summary>
      
    
    
    
    <category term="日常" scheme="http://example.com/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="difficult" scheme="http://example.com/tags/difficult/"/>
    
  </entry>
  
  <entry>
    <title>头歌  数据结构 实验七——数据查找与排序</title>
    <link href="http://example.com/2021/11/26/%E5%A4%B4%E6%AD%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C%E4%B8%83/"/>
    <id>http://example.com/2021/11/26/%E5%A4%B4%E6%AD%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C%E4%B8%83/</id>
    <published>2021-11-26T12:16:34.160Z</published>
    <updated>2021-11-26T12:23:52.350Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>这次一下更新两个实验，都是很简单的东西，就一些简单的排序和查找，也就不解释啦。</p><h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><h3 id="第1关：查找特定的数据元素-顺序查找"><a href="#第1关：查找特定的数据元素-顺序查找" class="headerlink" title="第1关：查找特定的数据元素-顺序查找"></a>第1关：查找特定的数据元素-顺序查找</h3><pre><code class="c++">#include &lt;stdio.h&gt;int find_pos(int data[] ,int n, int key)&#123;//在数组data中查找给定数据key,n表示数组中数据元素的个数 /*------------begin-----------------*/  for(int i=0;i&lt;n;i++)&#123;    if(data[i]==key)&#123;      return i;    &#125;  &#125;  return -1; /*------------end-----------------*/&#125;int main(void)&#123;int a[]=&#123;99,23,5,189,-1,66&#125;;int x;scanf(&quot;%d&quot;,&amp;x);//此处填写代码，调用find_pos，在a数组中查找给定数据x的位置，并输出函数返回的数据元素的位置  /*------------begin-----------------*/  int p=find_pos(a,6,x);  printf(&quot;%d&quot;,p); /*------------end-----------------*/       return 1;&#125;</code></pre><h3 id="第2关：查找-进阶-二分查找）"><a href="#第2关：查找-进阶-二分查找）" class="headerlink" title="第2关：查找-进阶(二分查找）"></a>第2关：查找-进阶(二分查找）</h3><pre><code class="c++">#include &lt;stdio.h&gt;int find_pos(int data[] ,int n, int key)&#123;//在数组data中查找给定数据key，n是数组中数据元素的个数，返回值是数据元素比较的次数.     /*------------begin-----------------*/  int low=0,high=n-1,count=0;  if(key&lt;data[0]||key&gt;data[n-1])&#123;    return count;  &#125;  while(low&lt;=high)&#123;    int mid=(low+high)/2;    if(key==data[mid])&#123;      count++;      return count;    &#125;    if(key&lt;data[mid])&#123;      high=mid-1;      count++;    &#125;else if(key&gt;data[mid])&#123;      low=mid+1;      count++;    &#125;  &#125;  return count; /*------------end-----------------*/&#125;int main(void)&#123;int a[]=&#123;-1,15,66,99,122,189&#125;;int x;scanf(&quot;%d&quot;,&amp;x);//此处填写代码，调用find_pos，在a数组中查找给定数据x的位置，并输出函数返回值  /*------------begin-----------------*/  int p=find_pos(a,6,x);  printf(&quot;%d&quot;,p); /*------------end-----------------*/       return 1;&#125;</code></pre><h3 id="第3关：查找进阶"><a href="#第3关：查找进阶" class="headerlink" title="第3关：查找进阶"></a>第3关：查找进阶</h3><pre><code class="c++">#include &lt;stdio.h&gt;void compute(int data[],int n, int target)&#123;//在此处填写代码，在data数组中查找是否存在两个元素之和为target，并按要求输出  /*-----------begin---------------*/   int a=-1,b=-1;  for(int i=0;i&lt;n-1;i++)&#123;    for(int j=i+1;j&lt;n;j++)&#123;      if(data[i]+data[j]==target)&#123;        a=i;b=j;      &#125;    &#125;  &#125;  printf(&quot;%d,%d&quot;,a,b); /*-----------end---------------*/ &#125;int main(void)&#123;    int a[]=&#123;-3,2,5,9,15,32&#125;;    int x ;    scanf(&quot;%d&quot;,&amp;x);    compute(a,6,x);&#125;</code></pre><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><h3 id="第1关：冒泡排序"><a href="#第1关：冒泡排序" class="headerlink" title="第1关：冒泡排序"></a>第1关：冒泡排序</h3><pre><code class="c++">#include &lt;stdio.h&gt;void print(int a[] ,int n)&#123;//输出数组元素，数字之间以一个空格为界，输出结束后换一行  for(int i=0;i&lt;n;i++)&#123;    printf(&quot;%d &quot;,a[i]);  &#125;  printf(&quot;\n&quot;);&#125;void bubbleSort(int a[] ,int n) //对数组a中的n个元素进行排序，调用print函数输出每趟排序后的结果&#123;  int m=n,flag=1,t=0;  while(flag==1&amp;&amp;m&gt;1)&#123;    flag=0;    t++;    for(int i=0;i&lt;m-1;i++)&#123;      if(a[i]&gt;a[i+1])&#123;        flag=1;        int tmp=a[i];        a[i]=a[i+1];        a[i+1]=tmp;      &#125;    &#125;    if(flag==1||t==1)&#123;      print(a,n);    &#125;    m--;  &#125;&#125;int main(void)&#123;  int num ;  scanf(&quot;%d&quot;,&amp;num);  int data[num];  for(int i=0;i&lt;num;i++)    scanf(&quot;%d&quot;,&amp;data[i]);  bubbleSort(data ,num);&#125;</code></pre><h3 id="第2关：快速排序"><a href="#第2关：快速排序" class="headerlink" title="第2关：快速排序"></a>第2关：快速排序</h3><pre><code class="c++">#include &lt;stdio.h&gt;void print(int a[] ,int n)&#123;//输出数组元素，数字之间以一个空格为界，输出结束后换一行  for(int i=0;i&lt;n;i++)&#123;    printf(&quot;%d &quot;,a[i]);  &#125;  printf(&quot;\n&quot;);&#125;void qSort(int a[] ,int left, int right) //&#123;  int flag=0,tleft=left,tright=right;  if(tleft&lt;tright)&#123;    int tmp=a[tleft];    while(tleft&lt;tright)&#123;      while(tleft&lt;tright&amp;&amp;a[tright]&gt;=tmp)&#123;        tright--;      &#125;      a[tleft]=a[tright];      while(tleft&lt;tright&amp;&amp;a[tleft]&lt;=tmp)&#123;        tleft++;      &#125;      a[tright]=a[tleft];    &#125;    a[tleft]=tmp;    flag=tleft;    print(a,right+1);    qSort(a,left,flag-1);    qSort(a,flag+1,right);  &#125;&#125;int main(void)&#123;  int num ;  scanf(&quot;%d&quot;,&amp;num);  int data[num];  for(int i=0;i&lt;num;i++)    scanf(&quot;%d&quot;,&amp;data[i]);  qSort(data ,0,num-1);  print(data,num);&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h2&gt;&lt;p&gt;这次一下更新两个实验，都是很简单的东西，就一些简单的排序和查找，也就不解释啦。&lt;/p&gt;
&lt;h2 id=&quot;查找&quot;&gt;&lt;a href=&quot;#</summary>
      
    
    
    
    <category term="头歌" scheme="http://example.com/categories/%E5%A4%B4%E6%AD%8C/"/>
    
    
    <category term="easy" scheme="http://example.com/tags/easy/"/>
    
  </entry>
  
  <entry>
    <title>头歌 Java 实验六第一关——从文件读取一篇英语文章，然后统计26个英文字母出现的次数</title>
    <link href="http://example.com/2021/11/24/%E5%A4%B4%E6%AD%8CJava%E5%AE%9E%E9%AA%8C%E5%85%AD%E7%82%B9%E4%B8%80/"/>
    <id>http://example.com/2021/11/24/%E5%A4%B4%E6%AD%8CJava%E5%AE%9E%E9%AA%8C%E5%85%AD%E7%82%B9%E4%B8%80/</id>
    <published>2021-11-24T09:03:03.000Z</published>
    <updated>2021-11-24T09:15:59.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第1关：从文件读取一篇英语文章，然后统计26个英文字母出现的次数"><a href="#第1关：从文件读取一篇英语文章，然后统计26个英文字母出现的次数" class="headerlink" title="第1关：从文件读取一篇英语文章，然后统计26个英文字母出现的次数"></a>第1关：从文件读取一篇英语文章，然后统计26个英文字母出现的次数</h2><h3 id="任务描述"><a href="#任务描述" class="headerlink" title="任务描述"></a>任务描述</h3><p>本关任务：从文件读取一篇英语文章，然后统计26个英文字母出现的次数。</p><h3 id="要求："><a href="#要求：" class="headerlink" title="要求："></a>要求：</h3><ol><li><p>按26个字母的顺序统计出每个字母出现的次数。</p></li><li><p>用于统计次数的类FileLetter，只有一个方法： public int[] LetterStatistics(String strFilename)； strFilename是输入的需统计的文件名; 返回的是一个整型数组，大小26，每个位置存放的分别是a到z出现的次数。</p><p>大小写字母算同一个字母。</p></li></ol><hr><p>开始你的任务吧，祝你成功！</p><h2 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h2><p>这题其实不难，只要就是我再学异常处理时没认真听，不知道异常到底是啥，都说 </p><blockquote><p>出来混的，总是要还的。</p></blockquote><p>在这里我就补回来了。<br><strong>其实异常又称为例外，是特殊的运行错误对象。在这里我主要将异常的两种解决办法。</strong></p><ul><li><strong>声明抛出异常：也就是在这个方法运行时不对异常进行处理，而是将他抛出给调用这个方法的方法进行处理。</strong></li><li><strong>捕获异常：这才是对异常真正进行处理的方法，用try{}catch{}语句。</strong></li></ul><p>在写这道题时我就搞混了这两种处理，我在一个方法内同时有抛出又有捕获，感觉自己没救了。</p><h2 id="源码："><a href="#源码：" class="headerlink" title="源码："></a>源码：</h2><pre><code class="c++">package step1;import java.io.FileInputStream;import java.io.IOException;//在此写FileLetter类public class FileLetter &#123;        private FileInputStream read;        public int[] LetterStatistics(String strFilename)&#123;        try&#123;            read=new FileInputStream(strFilename);            int[] letter=new int[26];            int b=read.read();            char a=&#39;a&#39;;char A=&#39;A&#39;;            while(b!=-1) &#123;                if(b-(int)a&gt;=0&amp;&amp;b-(int)a&lt;26) &#123;                    letter[b-(int)a]++;                &#125;                else if(b-(int)A&gt;=0&amp;&amp;b-(int)A&lt;26) &#123;                    letter[b-(int)A]++;                &#125;                b=read.read();            &#125;            read.close();            return letter;        &#125;catch(IOException ioe) &#123;            ioe.printStackTrace();            return null;        &#125;        &#125;&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;第1关：从文件读取一篇英语文章，然后统计26个英文字母出现的次数&quot;&gt;&lt;a href=&quot;#第1关：从文件读取一篇英语文章，然后统计26个英文字母出现的次数&quot; class=&quot;headerlink&quot; title=&quot;第1关：从文件读取一篇英语文章，然后统计26个英文字母出</summary>
      
    
    
    
    <category term="头歌" scheme="http://example.com/categories/%E5%A4%B4%E6%AD%8C/"/>
    
    
    <category term="easy" scheme="http://example.com/tags/easy/"/>
    
  </entry>
  
  <entry>
    <title>头歌 Java 实验五——集合框架</title>
    <link href="http://example.com/2021/11/23/%E5%A4%B4%E6%AD%8CJAVA%E5%AE%9E%E9%AA%8C%E4%BA%94/"/>
    <id>http://example.com/2021/11/23/%E5%A4%B4%E6%AD%8CJAVA%E5%AE%9E%E9%AA%8C%E4%BA%94/</id>
    <published>2021-11-23T14:40:40.000Z</published>
    <updated>2021-11-23T14:58:10.213Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>今天晚上心血来潮，准备写道Java的题，打开头歌找到了这个，原以为会很快解决这题，但没想到的是我还是花了一个多小时，主要还是不够理解HashMap这个类。<strong>主要就是要注意到HashMap的key和value都得是类，比如int的包裹类是Integer</strong>。</p><h2 id="第1关：-实验五"><a href="#第1关：-实验五" class="headerlink" title="第1关： 实验五"></a>第1关： 实验五</h2><h3 id="任务描述"><a href="#任务描述" class="headerlink" title="任务描述"></a>任务描述</h3><p>本关任务：设计一个程序，管理一个班级的若干学生（学生的姓名是唯一的），每个学生都修了若干门课程，没门课程都有了一个成绩。但一个班的同学修的课程不完全一样。</p><h3 id="要求："><a href="#要求：" class="headerlink" title="要求："></a>要求：</h3><p>该程序用集合框架的Map接口来实现。学生用Map来存储，键用学生姓名，值是另一个存储课程的Map；每个同学修的若干门课程也用Map来存储，键是课程名称，值是该课程的成绩。</p><ul><li><code>将把完成的工作放在Class类中。 类名：Class    public Class(String name) 构造函数，name为班级名称；</code></li><li><code> public void addCourseGrade(String stuname,String []Coursenames,Integer[] grades) 增加学生及课程的数据，stuname 学生姓名，Coursenames多个课程名，grades对应的多个分数；</code></li><li><code>public void addCourseGrade(String stuname,String Coursename,Integer grade) 增加学生及课程的数据，stuname 学生姓名，Coursename课程名，grade对应的分数；</code></li><li><code>public void delStudent(String stuname) 删出一个学生，stuname学生姓名； </code></li><li><code>public void delStuCourse(String stuname,String Coursename) 删出一个学生的一门课程，stuname学生姓名，Coursename课程名；</code></li><li><code>public double getPerAvgStudent(String stuname)返回一个学生的所有课程的平均成绩，stuname学生姓名； ``     </code> </li><li><code>public double getClassAvgCourse(String Coursename) 返回一个班某门课程的平均成绩，如果该班有同学没选修该门课程，平均成绩不计算该同学，Coursename为课程名。</code></li></ul><hr><p>开始你的任务吧，祝你成功！</p><h3 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h3><ol><li><strong>构造函数中的字符串是没用的，写代码时不需要过多纠结name是干啥的，只要加上就行了。</strong></li><li><strong>学生的HashMap需要封装成类(内部类)。</strong></li><li><strong>添加课程时不能把原有课程给覆盖了。</strong></li></ol><h2 id="源码："><a href="#源码：" class="headerlink" title="源码："></a>源码：</h2><pre><code class="c++">package step1;import java.util.*;//在此写Class类public class Class &#123;        class Student&#123;        public  HashMap&lt;String,Integer&gt; courses=new HashMap&lt;String, Integer&gt;();//存储课程    &#125;        private HashMap&lt;String,Student&gt; students; //存储学生            public  Class(String name) &#123;        students=new HashMap&lt;String,Student&gt;();//不用关心name干啥    &#125;    //添加多个课程    public void addCourseGrade(String stuname,String []Coursenames,Integer[] grades) &#123;        Student a=null;        for(String s:students.keySet()) &#123;            if(s.equals(stuname)) &#123;                a=students.get(stuname);            &#125;        &#125;        if(a==null) &#123;            a=new Student();        &#125;        for(int i=0;i&lt;Coursenames.length;i++) &#123;            a.courses.put(Coursenames[i], grades[i]);        &#125;        students.put(stuname, a);    &#125;    //添加单个课程    public void addCourseGrade(String stuname,String Coursename,Integer grade) &#123;        Student a=null;        for(String s:students.keySet()) &#123;            if(s.equals(stuname)) &#123;                a=students.get(stuname);            &#125;        &#125;        if(a==null) &#123;            a=new Student();        &#125;        a.courses.put(Coursename, grade);        students.put(stuname, a);    &#125;    //删除学生    public void delStudent(String stuname) &#123;        students.remove(stuname);    &#125;    //删除课程    public void delStuCourse(String stuname,String Coursename) &#123;        students.get(stuname).courses.remove(Coursename);    &#125;    //得到学生的平均分    public double getPerAvgStudent(String stuname) &#123;        double goal=0;        for(Integer i:students.get(stuname).courses.values()) &#123;            goal+=i;        &#125;        return goal/students.get(stuname).courses.size();    &#125;    //得到课程的平均分    public double getClassAvgCourse(String Coursename) &#123;        double goal=0;        int number=0;        for(Student s:students.values()) &#123;            for(String a:s.courses.keySet()) &#123;                if(a.equals(Coursename)) &#123;                    goal+=s.courses.get(Coursename);                    number++;                &#125;            &#125;        &#125;        return goal/number;    &#125;&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h2&gt;&lt;p&gt;今天晚上心血来潮，准备写道Java的题，打开头歌找到了这个，原以为会很快解决这题，但没想到的是我还是花了一个多小时，主要还是不够理解</summary>
      
    
    
    
    <category term="头歌" scheme="http://example.com/categories/%E5%A4%B4%E6%AD%8C/"/>
    
    
    <category term="common" scheme="http://example.com/tags/common/"/>
    
  </entry>
  
  <entry>
    <title>赫夫曼树和赫夫曼编码</title>
    <link href="http://example.com/2021/11/23/%E5%A4%B4%E6%AD%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C%E4%BA%94%E8%A1%A5/"/>
    <id>http://example.com/2021/11/23/%E5%A4%B4%E6%AD%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C%E4%BA%94%E8%A1%A5/</id>
    <published>2021-11-23T03:05:05.000Z</published>
    <updated>2021-11-23T03:21:36.181Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>接近一个礼拜没更新了，因为上周周末我有两场计算机的算法比赛，我要复习，没时间更新博客。可事情总是不如人意，两场考试我都考的不好，都没做出来几道题，深深的打击了我，现在处于极度痛苦中。</p><p><img src="https://cdn.jsdelivr.net/gh/QshuRyaoF/MyPictureBed@master/img/%E7%97%9B%E8%8B%A6.gif" alt="痛苦"></p><p>这次说的这道题也没啥难的，<strong>唯一要注意的就是如何用选择排序选出一组序列中最小的两个数，而根据题目要求可以看出左右之分是根据这两个数的下标决定</strong>，而我排出来的是根据数字大小排的，所有在最后需要按照要求改一下。</p><h2 id="第1关：赫夫曼树和赫夫曼编码"><a href="#第1关：赫夫曼树和赫夫曼编码" class="headerlink" title="第1关：赫夫曼树和赫夫曼编码"></a>第1关：赫夫曼树和赫夫曼编码</h2><hr><h3 id="任务描述"><a href="#任务描述" class="headerlink" title="任务描述"></a>任务描述</h3><p>本关任务：赫夫曼编码。请编写一个程序，先输入字符个数，再输入各个字符的权值（权值大小对应字符的出现频率），请以这些字符为叶子建立赫夫曼树，再求出其赫夫曼编码，并打印。</p><h3 id="相关知识"><a href="#相关知识" class="headerlink" title="相关知识"></a>相关知识</h3><p>为了完成本关任务，你需要掌握：1.如何建立赫夫曼树，2.如何应用赫夫曼树进行编码。</p><h4 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h4><p>根据课本，给出赫夫曼树存储的数据结构</p><pre><code>typedef struct&#123;    unsigned int weight;    unsigned int parent, lchild, rchild;&#125;HTNode, *HuffmanTree;        //动态分配数组存储赫夫曼树typedef char ** HuffmanCode;    //动态分配数组存储赫夫曼编码表</code></pre><h4 id="建立赫夫曼树"><a href="#建立赫夫曼树" class="headerlink" title="建立赫夫曼树"></a>建立赫夫曼树</h4><p>建立过程如下：</p><pre><code>for(i= 第n+1个结点开始； i&lt;=没有到达第2n+1个结点； 结点下标++)&#123;    Select(HT，i-1， s1, s2);    以s1和s2为下标的结点的双亲是i；    s1和s2中下标靠前的是i结点的左孩子，另一个为右孩子&#125;</code></pre><p>函数名如下： <code>void Create_HuffmanTree(HuffmanTree HT,int n)；</code></p><p>HT的初始化函数已经给出，不需要学生完成。</p><h4 id="求赫夫曼编码"><a href="#求赫夫曼编码" class="headerlink" title="求赫夫曼编码"></a>求赫夫曼编码</h4><p>从叶子开始逆序遍历建好的赫夫曼树 举例如下： 从叶子结点a开始，a的双亲是b，a是b的左孩子，则在a的编码序列中添加一个‘0’，b的双亲是c，b是c的右孩子，则在a的编码序列的最左侧添加一个‘1’，此时a的编码序列是‘10’。c的双亲是0，则逆序编列结束.将a的编码字符串存入HC中。</p><p>函数名如下： <code>void GetHuffmanCode(HuffmanCode HC, HuffmanTree HT, int n)；</code> 同样，HC的初始化函数已经给出，不需要学生完成。</p><h4 id="Select-函数"><a href="#Select-函数" class="headerlink" title="Select()函数"></a>Select()函数</h4><p>提示： 可以参考选择排序的方法，使用两个整型变量，或指针，指定两个数为最小值，在遍历过程中，遇到比两个数其中任意一个数小时，与更改下标或更改指针指向。这种方法可以在仅作一次循环的前提下，找到两个最小值。</p><h3 id="编程要求"><a href="#编程要求" class="headerlink" title="编程要求"></a>编程要求</h3><p>根据提示，在右侧编辑器补充代码，将建立赫夫曼树、查找权重最小的结点下标和获取赫夫曼编码的函数补充完整。</p><h3 id="测试说明"><a href="#测试说明" class="headerlink" title="测试说明"></a>测试说明</h3><p>平台会对你编写的代码进行测试：</p><p>测试输入：</p><pre><code>8    //8个权值5 29 7 8 14 23 3 11        //录入权值</code></pre><p>预期输出：</p><pre><code>01101011101111110000111010</code></pre><hr><p>开始你的任务吧，祝你成功！</p><h2 id="源码："><a href="#源码：" class="headerlink" title="源码："></a>源码：</h2><pre><code class="c++">/*    哈夫曼编码(代码补充) */#include&lt;iostream&gt;#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;string.h&gt;typedef struct&#123;    int weight;    int parent, lchild, rchild;&#125;HTNode, *HuffmanTree;    //动态数组，元素为HTNode typedef char** HuffmanCode;    //编码表，每一个元素都是一个编码，即char*方式存储的字符串 void Init_weight(int **w, int n)&#123;    while(!(*w=(int*)malloc((n+1)*sizeof(int))));&#125;void Create_Weight(int n, int *w)&#123;    int i, data;    for(i = 1; i&lt;=n; i++)&#123;        scanf(&quot;%d&quot;, &amp;data);        w[i] = data;    &#125;&#125;            //初始化哈夫曼树 void Init_HuffmanTree(HuffmanTree *HT,int *w, int n)&#123;    int i;    int m = 2*n-1;    HTNode *p;    while(!((*HT)=(HTNode*)malloc(sizeof(HTNode)*(m+1))));    for(p = (*HT)+1, i=1; i&lt;=n; i++, p++)&#123;        p-&gt;weight = w[i];        p-&gt;parent = 0;        p-&gt;rchild = 0;        p-&gt;lchild = 0;    &#125;    for(; i&lt;=m; i++, p++)&#123;        p-&gt;lchild = 0;        p-&gt;parent = 0;        p-&gt;rchild = 0;        p-&gt;weight = 0;    &#125;&#125;//利用选择排序（循环一次得到最小的两个值） //在HT中选择parent为0，且权重最小的两个节点，返回他们的数组下标分别为s1和s2 void Select(HuffmanTree HT, int i, int *s1, int *s2)&#123;    //**************begin********************    int flag1=0,flag2=0;    for(int j=1;j&lt;=i;j++)&#123;        if(HT[j].parent==0)&#123;            if(flag1==0)&#123;                *s1=j;                flag1++;                continue;            &#125;            if(flag2==0)&#123;                *s2=j;                flag2++;                continue;            &#125;            if(flag1==1&amp;&amp;flag2==1&amp;&amp;HT[*s1].weight&gt;HT[*s2].weight)&#123;                int x=*s1;*s1=*s2;*s2=x;            &#125;            if(HT[j].weight&lt;HT[*s1].weight)&#123;                *s2=*s1;                *s1=j;                continue;            &#125;            if(HT[j].weight&lt;HT[*s2].weight)&#123;                *s2=j;                continue;            &#125;        &#125;    &#125;    //这里就是根据下标大小来重新排一下    if(*s1&gt;*s2)&#123;        int x=*s1;*s1=*s2;*s2=x;    &#125;          //****************end******************&#125;    //创建哈夫曼树void Create_HuffmanTree(HuffmanTree HT,int n)&#123;    //**************begin********************    for(int i=n+1;i&lt;=2*n-1;i++)&#123;        int s1=0,s2=0;        Select(HT,i-1,&amp;s1,&amp;s2);        HT[i].lchild=s1;HT[i].rchild=s2;        HT[i].weight=HT[s1].weight+HT[s2].weight;        HT[s1].parent=i;HT[s2].parent=i;    &#125;      //****************end******************&#125;        //初始化哈夫曼编码表 void Init_HuffmanCode(HuffmanCode *HC,int n)&#123;    while(!((*HC) = (HuffmanCode)malloc((n+1)*sizeof(char*))));&#125;        //求哈夫曼编码void GetHuffmanCode(HuffmanCode HC, HuffmanTree HT, int n)&#123;    //**************begin********************    char temp[n];    temp[n-1]=&#39;\0&#39;;    for(int i=1;i&lt;=n;i++)&#123;        int start=n-1,f=HT[i].parent,t=i;        while(f!=0)&#123;            start--;            if(HT[f].lchild==t)&#123;                temp[start]=&#39;0&#39;;            &#125;else&#123;                temp[start]=&#39;1&#39;;            &#125;            t=f;f=HT[t].parent;        &#125;        HC[i]=new char[n-start];        strcpy(HC[i],&amp;temp[start]);    &#125;          //****************end******************&#125;        //打印哈夫曼编码表void PrintCode(HuffmanCode HC, int n)&#123;    for(int i=1; i&lt;=n; i++)&#123;        printf(&quot;%s\n&quot;, HC[i]);    &#125; &#125; void Destory(HuffmanTree *HT, HuffmanCode *HC)&#123;    free(*HC);    free(*HT);&#125;int main()&#123;    HuffmanTree HT;    HuffmanCode HC;    int *w, n;         scanf(&quot;%d&quot;, &amp;n);        //初始化权重数组     Init_weight(&amp;w, n);            //创建权值数组    //n表示权值个数     Create_Weight(n, w);                //初始化哈夫曼树     Init_HuffmanTree(&amp;HT, w, n);     //创建哈夫曼树    Create_HuffmanTree(HT, n);        //初始化哈夫曼编码表     Init_HuffmanCode(&amp;HC, n);        //求哈夫曼编码    GetHuffmanCode(HC, HT, n);         //打印哈夫曼编码表    PrintCode(HC, n);         //释放空间    Destory(&amp;HT, &amp;HC);             return 0;&#125; </code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h2&gt;&lt;p&gt;接近一个礼拜没更新了，因为上周周末我有两场计算机的算法比赛，我要复习，没时间更新博客。可事情总是不如人意，两场考试我都考的不好，都没</summary>
      
    
    
    
    <category term="头歌" scheme="http://example.com/categories/%E5%A4%B4%E6%AD%8C/"/>
    
    
    <category term="common" scheme="http://example.com/tags/common/"/>
    
  </entry>
  
  <entry>
    <title>ACM考核题中的BFS样题</title>
    <link href="http://example.com/2021/11/17/ACM%E7%AC%AC%E4%B8%80%E6%AC%A1%E8%80%83%E6%A0%B8%E7%9A%84DFS%E9%A2%98/"/>
    <id>http://example.com/2021/11/17/ACM%E7%AC%AC%E4%B8%80%E6%AC%A1%E8%80%83%E6%A0%B8%E7%9A%84DFS%E9%A2%98/</id>
    <published>2021-11-17T13:06:06.000Z</published>
    <updated>2021-11-17T13:37:05.217Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>果然功夫不负有心人，在前几天的第一次考核中我拿到了榜一，只不过可惜的是我没有ak，而那道我没有写出来的题就是我下面要展示的。</p><h2 id="签到题——爆发式"><a href="#签到题——爆发式" class="headerlink" title="签到题——爆发式"></a>签到题——爆发式</h2><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>因为媛泽一个小女生独自出国父母不放心，媛泽便多叫上几个学弟学妹和她一同前往飞往东京，其中就有嘉欢学姐，晴晴学姐，耀星学长。但是因为在买机票的时候有些失误，她没有和她们三挨在一起，但是飞机上媛泽感到非常寂寞，想要到她们仨任意一人的位置上去一起坐这次的长途飞机，飞机上位置看作一个1212*1212的矩阵，其中ZHQXJF分别表示媛泽，嘉欢，晴晴，耀星，日本人，其他乘客的位置，并且没有位置被空缺出来。在前往任意一个学弟或学妹的位置的时候会经过其它乘客，由于媛泽穿了漂亮的jk害怕飞机上的小日子过得还不错的日本人骚扰她，所以在前往学弟学妹的位置的过程中会尽力避开日本人和挨着日本人的乘客，聪明的你来帮帮媛泽躲开日本人并计算出可以到达的且离她最近的学弟或学妹与她的距离。</p><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>输入1212*1212的字符矩阵来表示灰机的座位关系。</p><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>如果媛泽能够避开日本人到达他们三之中任意一人的位置上时，输出最短距离，否则输出0。</p><h3 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1"></a>Sample Input 1</h3><pre><code>ZFJFHFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFJFFFFFFFJFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFJFFFFFFFJFFFFFFFFFFFFFQFFFFFFFFFFFFFFFFFFFFFFXFFFFFFFFF</code></pre><h3 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1"></a>Sample Output 1</h3><pre><code>12</code></pre><h3 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h3><pre><code class="c++">如果媛泽周围八个方向上已经有日本人了，则媛泽不会动身，如果耀星，嘉欢，晴请也都是这般情况，也视为不可达，以上情况则输出0.</code></pre><h2 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h2><p>很明显，这道题的解题思路依旧是运用BFS，我们需要一个结构体来存储我们的位置，和已经走过的步数，需要一个队列来存储我们现在的位置和相邻的位置，直到目的地址进入队列。<br>但这道题难的地方不是在写BFS的逻辑上面，而是在怎么判断相邻位置应不应该入队。由题意可知，入队的位置其周围的八个位置都不应该出现日本人”J”，但是有特例啊，比如在边缘的地方，他周围能坐人的地方都只有3个或5个，不可能这种地方也要判断8个方位吧，所以就要分区域了，不同区域的判断条件都不同，如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/QshuRyaoF/MyPictureBed@master/img/image-20211117212305438.png" alt="image-20211117212305438"></p><p>按照这样划分的话，区域1需要判断3个方向，区域2需要判断5个方向，方向图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/QshuRyaoF/MyPictureBed@master/img/image-20211117212642993.png" alt="image-20211117212642993"></p><p>这样下来判断语句就显得非常臃肿(一下是我在考核时写的)：</p><pre><code class="c++">bool judge(path n)&#123;    if(n.x&lt;12&amp;&amp;n.y&lt;12&amp;&amp;n.x&gt;=0&amp;&amp;n.y&gt;=0&amp;&amp;map[n.x][n.y]!=&#39;J&#39;)&#123;        if(n.x&lt;11&amp;&amp;n.y&lt;11&amp;&amp;n.x&gt;=1&amp;&amp;n.y&gt;=1&amp;&amp;map[n.x][n.y+1]!=&#39;J&#39;&amp;&amp;map[n.x+1][n.y+1]!=&#39;J&#39;&amp;&amp;map[n.x+1][n.y]!=&#39;J&#39;&amp;&amp;map[n.x+1][n.y-1]!=&#39;J&#39;&amp;&amp;map[n.x][n.y-1]!=&#39;J&#39;&amp;&amp;map[n.x-1][n.y-1]!=&#39;J&#39;&amp;&amp;map[n.x-1][n.y]!=&#39;J&#39;&amp;&amp;map[n.x-1][n.y+1]!=&#39;J&#39;)&#123;            return true;        &#125;else if(n.x&lt;11&amp;&amp;n.y&lt;12&amp;&amp;n.x&gt;=1&amp;&amp;n.y&gt;=11&amp;&amp;map[n.x+1][n.y]!=&#39;J&#39;&amp;&amp;map[n.x+1][n.y-1]!=&#39;J&#39;&amp;&amp;map[n.x][n.y-1]!=&#39;J&#39;&amp;&amp;map[n.x-1][n.y-1]!=&#39;J&#39;&amp;&amp;map[n.x-1][n.y]!=&#39;J&#39;)&#123;            return true;        &#125;else if(n.x&lt;12&amp;&amp;n.y&lt;11&amp;&amp;n.x&gt;=11&amp;&amp;n.y&gt;=1&amp;&amp;map[n.x][n.y+1]!=&#39;J&#39;&amp;&amp;map[n.x][n.y-1]!=&#39;J&#39;&amp;&amp;map[n.x-1][n.y-1]!=&#39;J&#39;&amp;&amp;map[n.x-1][n.y]!=&#39;J&#39;&amp;&amp;map[n.x-1][n.y+1]!=&#39;J&#39;)&#123;            return true;        &#125;else if(n.x&lt;11&amp;&amp;n.y&lt;1&amp;&amp;n.x&gt;=1&amp;&amp;n.y&gt;=0&amp;&amp;map[n.x][n.y+1]!=&#39;J&#39;&amp;&amp;map[n.x+1][n.y+1]!=&#39;J&#39;&amp;&amp;map[n.x+1][n.y]!=&#39;J&#39;&amp;&amp;map[n.x-1][n.y]!=&#39;J&#39;&amp;&amp;map[n.x-1][n.y+1]!=&#39;J&#39;)&#123;            return true;        &#125;else if(n.x&lt;1&amp;&amp;n.y&lt;11&amp;&amp;n.x&gt;=0&amp;n.y&gt;=1&amp;&amp;map[n.x][n.y+1]!=&#39;J&#39;&amp;&amp;map[n.x+1][n.y+1]!=&#39;J&#39;&amp;&amp;map[n.x+1][n.y]!=&#39;J&#39;&amp;&amp;map[n.x+1][n.y-1]!=&#39;J&#39;&amp;&amp;map[n.x][n.y-1]!=&#39;J&#39;)&#123;            return true;        &#125;else if(n.x==0&amp;&amp;n.y==11&amp;&amp;map[n.x+1][n.y]!=&#39;J&#39;&amp;&amp;map[n.x+1][n.y-1]!=&#39;J&#39;&amp;&amp;map[n.x][n.y-1]!=&#39;J&#39;)&#123;            return true;        &#125;else if(n.x==11&amp;&amp;n.y==11&amp;&amp;map[n.x+1][n.y-1]!=&#39;J&#39;&amp;&amp;map[n.x][n.y-1]!=&#39;J&#39;&amp;&amp;map[n.x-1][n.y-1]!=&#39;J&#39;)&#123;            return true;        &#125;else if(n.x==11&amp;&amp;n.y==0&amp;&amp;map[n.x][n.y+1]!=&#39;J&#39;&amp;&amp;map[n.x-1][n.y]!=&#39;J&#39;&amp;&amp;map[n.x-1][n.y+1]!=&#39;J&#39;)&#123;            return true;        &#125;else if(n.x==0&amp;&amp;n.y==0&amp;&amp;map[n.x][n.y+1]!=&#39;J&#39;&amp;&amp;map[n.x+1][n.y+1]!=&#39;J&#39;&amp;&amp;map[n.x+1][n.y]!=&#39;J&#39;)&#123;            return true;        &#125;    &#125;    return false;&#125;</code></pre><p>就问你这看的难不难受！<br>于是最后系统判我超时了，非常难受！<br>回到寝室后，我又继续想这道题该怎么写，于是我想到了一个好办法：<strong>将该矩阵扩展到14x14，外面的一圈用”F”填充</strong>，中央的才是我们的飞机座位表，这样我们原本处于边缘的位置就不再是边缘了，而且其新填的位置都不是日本人，这样我们的判断条件对于12x12矩阵中的每一个元素都是适用的。<strong>还有最重要的一点就是走过的路不能重复走，得写一个布尔类型的矩阵，这个当时我忘了，所以铁定超时！</strong></p><p>新的判断条件：</p><pre><code class="c++">remap[n.x][n.y]==false&amp;&amp;n.x&lt;13&amp;&amp;n.y&lt;13&amp;&amp;n.x&gt;=1&amp;&amp;n.y&gt;=1&amp;&amp;map[n.x][n.y]!=&#39;J&#39;&amp;&amp;map[n.x][n.y+1]!=&#39;J&#39;&amp;&amp;map[n.x+1][n.y+1]!=&#39;J&#39;&amp;&amp;map[n.x+1][n.y]!=&#39;J&#39;&amp;&amp;map[n.x+1][n.y-1]!=&#39;J&#39;&amp;&amp;map[n.x][n.y-1]!=&#39;J&#39;&amp;&amp;map[n.x-1][n.y-1]!=&#39;J&#39;&amp;&amp;map[n.x-1][n.y]!=&#39;J&#39;&amp;&amp;map[n.x-1][n.y+1]!=&#39;J&#39;</code></pre><h2 id="源码："><a href="#源码：" class="headerlink" title="源码："></a>源码：</h2><pre><code class="c++">#include&lt;iostream&gt;#include&lt;queue&gt;#include&lt;cstring&gt;using namespace std;bool remap[14][14];char map[14][14];struct path&#123;    int x;    int y;    char vul;    int count;&#125;;queue&lt;path&gt; q;int M[4][2]=&#123;0,1,1,0,0,-1,-1,0&#125;;int go(path s)&#123;    path now,n;    remap[s.x][s.y]=true;    q.push(s);    while (!q.empty())    &#123;        now=q.front();        if(now.vul==&#39;H&#39;||now.vul==&#39;X&#39;||now.vul==&#39;Q&#39;)&#123;            return now.count;        &#125;        for(int i=0;i&lt;4;i++)&#123;            n.x=M[i][0]+now.x;            n.y=M[i][1]+now.y;            if(remap[n.x][n.y]==false&amp;&amp;n.x&lt;13&amp;&amp;n.y&lt;13&amp;&amp;n.x&gt;=1&amp;&amp;n.y&gt;=1&amp;&amp;map[n.x][n.y]!=&#39;J&#39;&amp;&amp;map[n.x][n.y+1]!=&#39;J&#39;&amp;&amp;map[n.x+1][n.y+1]!=&#39;J&#39;&amp;&amp;map[n.x+1][n.y]!=&#39;J&#39;&amp;&amp;map[n.x+1][n.y-1]!=&#39;J&#39;&amp;&amp;map[n.x][n.y-1]!=&#39;J&#39;&amp;&amp;map[n.x-1][n.y-1]!=&#39;J&#39;&amp;&amp;map[n.x-1][n.y]!=&#39;J&#39;&amp;&amp;map[n.x-1][n.y+1]!=&#39;J&#39;)&#123;                n.vul=map[n.x][n.y];                n.count=now.count+1;                q.push(n);                remap[n.x][n.y]=true;            &#125;        &#125;        q.pop();    &#125;    return 0;&#125;int main()&#123;    path s;    memset(map,&#39;F&#39;,sizeof(map));    memset(remap,false,sizeof(remap));    for(int i=1;i&lt;13;i++)&#123;        for(int j=1;j&lt;13;j++)&#123;            cin&gt;&gt;map[i][j];            if(map[i][j]==&#39;Z&#39;)&#123;                s.x=i;                s.y=j;                s.vul=&#39;Z&#39;;                s.count=0;            &#125;        &#125;    &#125;    cout&lt;&lt;go(s);    return 0;&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h2&gt;&lt;p&gt;果然功夫不负有心人，在前几天的第一次考核中我拿到了榜一，只不过可惜的是我没有ak，而那道我没有写出来的题就是我下面要展示的。&lt;/p&gt;</summary>
      
    
    
    
    <category term="ACM" scheme="http://example.com/categories/ACM/"/>
    
    
    <category term="common" scheme="http://example.com/tags/common/"/>
    
  </entry>
  
  <entry>
    <title>头歌 数据结构 实验五——二叉树及其应用</title>
    <link href="http://example.com/2021/11/15/%E5%A4%B4%E6%AD%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C%E4%BA%94/"/>
    <id>http://example.com/2021/11/15/%E5%A4%B4%E6%AD%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C%E4%BA%94/</id>
    <published>2021-11-15T15:45:45.000Z</published>
    <updated>2021-11-15T15:57:19.731Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>这个实验总共有五关，都是基础知识，总共也才花了我一个小时(狗头保命)，除了第四五关的非递归比较难想，其他的都是小case，这里就不过多解释了。</p><h2 id="第一关：实现二叉树的创建"><a href="#第一关：实现二叉树的创建" class="headerlink" title="第一关：实现二叉树的创建"></a>第一关：实现二叉树的创建</h2><pre><code class="c++">BiTreeNode* CreatBiTree(char* s, int &amp;i, int len)// 利用先序遍历创建二叉树// 参数：先序遍历字符串s，字符串初始下标i=0，字符串长度len。// 返回：二叉树&#123;    // 请在这里补充代码，完成本关任务    /********** Begin *********/    BiTreeNode* root=new BiTreeNode;    if(s[i]==&#39;#&#39;)&#123;        root=NULL;        i++;    &#125;else&#123;        root-&gt;data=s[i];        i++;        root-&gt;left=CreatBiTree(s,i,len);        root-&gt;right=CreatBiTree(s,i,len);    &#125;    return root;    /********** End **********/&#125;void InOrder(BiTreeNode* root)// 二叉树的中序遍历// 参数：二叉树根节点root// 输出：中间没有空格，末尾不换行。&#123;    // 请在这里补充代码，完成本关任务    /********** Begin *********/    if(root!=NULL)&#123;        InOrder(root-&gt;left);        printf(&quot;%c&quot;,root-&gt;data);        InOrder(root-&gt;right);    &#125;        /********** End **********/&#125;</code></pre><h2 id="第二关：计算二叉树的深度和节点个数"><a href="#第二关：计算二叉树的深度和节点个数" class="headerlink" title="第二关：计算二叉树的深度和节点个数"></a>第二关：计算二叉树的深度和节点个数</h2><pre><code class="c++">int GetTreeDepth(BiTreeNode* root)// 计算该二叉树的深度// 参数：二叉树根节点root// 返回：二叉树的深度&#123;    // 请在这里补充代码，完成本关任务    /********** Begin *********/    if(!root)&#123;        return 0;    &#125;else&#123;        return 1+(GetTreeDepth(root-&gt;left)&gt;=GetTreeDepth(root-&gt;right)?GetTreeDepth(root-&gt;left):GetTreeDepth(root-&gt;right));    &#125;    /********** End **********/&#125;int GetNodeNumber(BiTreeNode* root)// 计算该二叉树的总节点个数// 参数：二叉树根节点root// 返回：二叉树的总节点个数&#123;    // 请在这里补充代码，完成本关任务    /********** Begin *********/    if(!root)&#123;        return 0;    &#125;else&#123;        return 1+GetNodeNumber(root-&gt;right)+GetNodeNumber(root-&gt;left);    &#125;    /********** End **********/&#125;int GetLeafNodeNumber(BiTreeNode* root)// 计算该二叉树的叶子节点个数// 参数：二叉树根节点root// 返回：二叉树的叶子节点个数&#123;    // 请在这里补充代码，完成本关任务    /********** Begin *********/    if(!root)&#123;        return 0;    &#125;else if(!root-&gt;left&amp;&amp;!root-&gt;right)&#123;        return 1;    &#125;else&#123;        return GetLeafNodeNumber(root-&gt;left)+GetLeafNodeNumber(root-&gt;right);    &#125;    /********** End **********/&#125;</code></pre><h2 id="第三关：递归实现二叉树左右子树交换"><a href="#第三关：递归实现二叉树左右子树交换" class="headerlink" title="第三关：递归实现二叉树左右子树交换"></a>第三关：递归实现二叉树左右子树交换</h2><pre><code class="c++">BiTreeNode* BiTreeChange(BiTreeNode* root)// 实现二叉树左右子树的交换（递归法）// 参数：二叉树根节点root// 返回：二叉树&#123;    // 请在这里补充代码，完成本关任务    /********** Begin *********/    if(!root)&#123;        return NULL;    &#125;else&#123;        BiTreeChange(root-&gt;left);        BiTreeChange(root-&gt;right);        BiTreeNode* tmp=root-&gt;left;        root-&gt;left=root-&gt;right;        root-&gt;right=tmp;    &#125;        /********** End **********/&#125;void PreOrder(BiTreeNode* root)// 二叉树的前序遍历// 参数：二叉树根节点root// 输出：二叉树的前序遍历，中间没有空格，末尾不换行。&#123;    // 请在这里补充代码，完成本关任务    /********** Begin *********/    if(root)&#123;        printf(&quot;%c&quot;,root-&gt;data);        PreOrder(root-&gt;left);        PreOrder(root-&gt;right);    &#125;        /********** End **********/&#125;</code></pre><h2 id="第四关：非递归实现二叉树左右子树交换"><a href="#第四关：非递归实现二叉树左右子树交换" class="headerlink" title="第四关：非递归实现二叉树左右子树交换"></a>第四关：非递归实现二叉树左右子树交换</h2><pre><code class="c++">BiTreeNode* BiTreeChangeStack(BiTreeNode* root)// 实现二叉树左右子树的交换（栈实现）// 参数：二叉树根节点root// 返回：二叉树&#123;    // 请在这里补充代码，完成本关任务    /********** Begin *********/    stack&lt;BiTreeNode*&gt; s;    BiTreeNode *p=root;    if(root==NULL)&#123;        return NULL;    &#125;    s.push(root);    while(!s.empty())&#123;        BiTreeNode *temp=p-&gt;left;        p-&gt;left=p-&gt;right;        p-&gt;right=temp;        if(p-&gt;left!=NULL)&#123;            s.push(p-&gt;left);        &#125;        if(p-&gt;right!=NULL)&#123;            s.push(p-&gt;right);        &#125;        p=s.top();        s.pop();    &#125;    return root;    /********** End **********/&#125;void PostOrder(BiTreeNode* root)// 二叉树的后序遍历// 参数：二叉树根节点root// 输出：二叉树的后序遍历，中间没有空格，末尾不换行。&#123;    // 请在这里补充代码，完成本关任务    /********** Begin *********/    if(root!=NULL)&#123;        PostOrder(root-&gt;left);        PostOrder(root-&gt;right);        printf(&quot;%c&quot;,root-&gt;data);    &#125;    /********** End **********/&#125;</code></pre><h2 id="第五关：层次遍历二叉树"><a href="#第五关：层次遍历二叉树" class="headerlink" title="第五关：层次遍历二叉树"></a>第五关：层次遍历二叉树</h2><pre><code class="c++">void HierarchyOrder(BiTreeNode* root)// 二叉树的层次遍历（队列实现）// 参数：二叉树根节点root// 输出：二叉树的层次遍历，中间没有空格，末尾不换行。&#123;    // 请在这里补充代码，完成本关任务    /********** Begin *********/    queue&lt;BiTreeNode*&gt; q;    BiTreeNode *now;    q.push(root);    while(!q.empty())&#123;        now=q.front();        if(now!=NULL)&#123;            printf(&quot;%c&quot;,now-&gt;data);        &#125;        if(now-&gt;left!=NULL)&#123;            q.push(now-&gt;left);        &#125;        if(now-&gt;right!=NULL)&#123;            q.push(now-&gt;right);        &#125;        q.pop();    &#125;    /********** End **********/&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h2&gt;&lt;p&gt;这个实验总共有五关，都是基础知识，总共也才花了我一个小时(狗头保命)，除了第四五关的非递归比较难想，其他的都是小case，这里就不过</summary>
      
    
    
    
    <category term="头歌" scheme="http://example.com/categories/%E5%A4%B4%E6%AD%8C/"/>
    
    
    <category term="easy" scheme="http://example.com/tags/easy/"/>
    
  </entry>
  
  <entry>
    <title>有序链表的异地合并</title>
    <link href="http://example.com/2021/11/14/%E9%93%BE%E8%A1%A8%E5%90%88%E5%B9%B6/"/>
    <id>http://example.com/2021/11/14/%E9%93%BE%E8%A1%A8%E5%90%88%E5%B9%B6/</id>
    <published>2021-11-13T16:21:21.000Z</published>
    <updated>2021-11-13T16:35:25.370Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>现在是凌晨，今天下午ACM就考核了，我要临时抱一下佛退，赶紧复习一下归并排序，但在题库里面找来找去，没找到非常合适的，只找到这个题，就当作练练手吧。</p><h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><p>已知两个非降序链表序列S1与S2，设计函数构造出S1与S2合并后的新的非降序链表S3。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h3><p>输入分两行，分别在每行给出由若干个正整数构成的非降序序列，用−1表示序列的结尾（−1不属于这个序列）。数字用空格间隔。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h3><p>在一行中输出合并后新的非降序链表，数字间用空格分开，结尾不能有多余空格；若新链表为空，输出<code>NULL</code>。</p><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h3><pre><code class="in">1 3 5 -12 4 6 8 10 -1结尾无空行</code></pre><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h3><pre><code class="out">1 2 3 4 5 6 8 10结尾无空行</code></pre><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><p>由于是异地合并，<strong>所有我们需要三个指针a.b.c，一个指向A当前所比较的数，一个指向B当前所比较的数，还要一个指向C现在的尾部，这样我们就是通过尾插法对C进行添加数据了。每次我们只需要比较a和b中哪个小，然后将其数据复制到一个新的节点上，再将这个节点插到c的后面就行了，而a或b中较小的也要向后移一下。当其中一链表比完了后，只需要把另一个链表全接上去就行了</strong>，就这么简单。</p><h2 id="源码："><a href="#源码：" class="headerlink" title="源码："></a>源码：</h2><pre><code class="c++">#include&lt;iostream&gt;using namespace std;typedef struct Lnode&#123;    int data;    Lnode* next;&#125;Lnode,*Linklist;//尾插法创建链表void Create(Linklist &amp;l)&#123;    l=new Lnode;    l-&gt;next=NULL;    Lnode* r=l;    int d;    cin&gt;&gt;d;    while(d!=-1)&#123;        Lnode* p=new Lnode;        p-&gt;data=d;        p-&gt;next=r-&gt;next;        r-&gt;next=p;        r=p;        cin&gt;&gt;d;    &#125;&#125;//合并函数void merge(Linklist &amp;a,Linklist &amp;b,Linklist &amp;c)&#123;    c=new Lnode;    c-&gt;next=NULL;    Lnode* r=c;    Lnode* m=a-&gt;next;    Lnode* n=b-&gt;next;    while(m&amp;&amp;n)&#123;        if(m-&gt;data&gt;=n-&gt;data)&#123;            Lnode* p=new Lnode;            p-&gt;data=n-&gt;data;            p-&gt;next=r-&gt;next;            r-&gt;next=p;            r=p;            n=n-&gt;next;        &#125;else&#123;            Lnode* p=new Lnode;            p-&gt;data=m-&gt;data;            p-&gt;next=r-&gt;next;            r-&gt;next=p;            r=p;            m=m-&gt;next;        &#125;    &#125;    while(m)&#123;        Lnode* p=new Lnode;        p-&gt;data=m-&gt;data;        p-&gt;next=r-&gt;next;        r-&gt;next=p;        r=p;        m=m-&gt;next;    &#125;    while(n)&#123;        Lnode* p=new Lnode;        p-&gt;data=n-&gt;data;        p-&gt;next=r-&gt;next;        r-&gt;next=p;        r=p;        n=n-&gt;next;    &#125;&#125;int main()&#123;    Linklist a,b,c;    Create(a);    Create(b);    merge(a,b,c);    if(!c-&gt;next)&#123;        cout&lt;&lt;&quot;NULL&quot;;    &#125;else&#123;        Lnode* p=c-&gt;next;        while(p)&#123;            if(p-&gt;next)&#123;                cout&lt;&lt;p-&gt;data&lt;&lt;&#39; &#39;;                p=p-&gt;next;            &#125;else&#123;                cout&lt;&lt;p-&gt;data;                p=p-&gt;next;            &#125;                    &#125;    &#125;    return 0;&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h2&gt;&lt;p&gt;现在是凌晨，今天下午ACM就考核了，我要临时抱一下佛退，赶紧复习一下归并排序，但在题库里面找来找去，没找到非常合适的，只找到这个题，</summary>
      
    
    
    
    <category term="日常" scheme="http://example.com/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="common" scheme="http://example.com/tags/common/"/>
    
  </entry>
  
  <entry>
    <title>头歌 JAVA 实训四——接口</title>
    <link href="http://example.com/2021/11/10/%E5%A4%B4%E6%AD%8CJAVA%E5%AE%9E%E8%AE%AD%E5%9B%9B/"/>
    <id>http://example.com/2021/11/10/%E5%A4%B4%E6%AD%8CJAVA%E5%AE%9E%E8%AE%AD%E5%9B%9B/</id>
    <published>2021-11-10T12:55:11.000Z</published>
    <updated>2021-11-10T13:17:14.679Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一关：接口练习"><a href="#第一关：接口练习" class="headerlink" title="第一关：接口练习"></a>第一关：接口练习</h2><h3 id="任务描述"><a href="#任务描述" class="headerlink" title="任务描述"></a>任务描述</h3><p>本关任务：定义一个Animal接口，并按要求实现接口。</p><h3 id="要求："><a href="#要求：" class="headerlink" title="要求："></a>要求：</h3><ol><li>Animal接口包含三个方法：     public void Speak(); //说话     public void Walk(); //行走方式     public String toString();//返回动物名称</li><li>定义Centipede（蜈蚣）类，实现Animal接口。例如： void Speak()；方法显示“不发声” void Walk(); 方法显示“不知道有多少条腿走路” String toString(); 方法返回“蜈蚣”</li><li>定义Dog（狗）类，实现Animal接口。</li><li>定义People（人）类，实现Animal接口。</li><li>定义Chinese（中国人）类，继承People（人）类。</li><li>定义Britisher（英国人）类，继承People（人）类。</li></ol><p>最后设计一个类来测试你的所有的程序，通过该例充分理解接口、继承、多态。</p><h3 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h3><p>这个题需要注意的一点就是题目的要求写的不完整，我们需要知道实现的类(如：Dog,People)<strong>要把所有方法都重写一遍，且内容需要自己根据蜈蚣的提示写出来，而toString函数是每个类都需要重写的</strong>，这点我觉得题目给的提示不够，很离谱。</p><h3 id="源码："><a href="#源码：" class="headerlink" title="源码："></a>源码：</h3><h4 id="Animal-java"><a href="#Animal-java" class="headerlink" title="Animal.java"></a>Animal.java</h4><pre><code class="java">package step2;//定义Animal接口public interface Animal &#123;    public void Speak();    public void Walk();    public String toString();&#125;</code></pre><h4 id="Centipede-java"><a href="#Centipede-java" class="headerlink" title="Centipede.java"></a>Centipede.java</h4><pre><code class="java">package step2;//完成Centipede类public class Centipede implements Animal &#123;    public void Speak() &#123;        System.out.print(&quot;不发声&quot;);    &#125;    public void Walk() &#123;        System.out.print(&quot;不知道有多少条腿在走路&quot;);    &#125;    public String toString() &#123;        return &quot;蜈蚣&quot;;    &#125;&#125;</code></pre><h4 id="Dog-java"><a href="#Dog-java" class="headerlink" title="Dog.java"></a>Dog.java</h4><pre><code class="java">package step2;//完成Dog类public class Dog implements Animal&#123;    public void Speak() &#123;        System.out.print(&quot;发声&quot;);    &#125;    public void Walk() &#123;        System.out.print(&quot;四条腿走路&quot;);    &#125;    public String toString() &#123;        return &quot;狗&quot;;    &#125;&#125;</code></pre><h4 id="People-java"><a href="#People-java" class="headerlink" title="People.java"></a>People.java</h4><pre><code class="java">package step2;//完成People类public class People implements Animal&#123;    public void Speak() &#123;        System.out.print(&quot;发声&quot;);    &#125;    public void Walk() &#123;        System.out.print(&quot;两条腿走路&quot;);    &#125;    public String toString() &#123;        return &quot;人&quot;;    &#125;&#125;</code></pre><h4 id="Chinese-java"><a href="#Chinese-java" class="headerlink" title="Chinese.java"></a>Chinese.java</h4><pre><code class="java">package step2;//完成Chinese类public class Chinese extends People&#123;    public String toString() &#123;        return &quot;中国人&quot;;    &#125;&#125;</code></pre><h4 id="Britisher-java"><a href="#Britisher-java" class="headerlink" title="Britisher.java"></a>Britisher.java</h4><pre><code class="java">package step2;//完成Britisher类public class Britisher extends People&#123;    public String toString() &#123;        return &quot;英国人&quot;;    &#125;&#125;</code></pre><h2 id="第二关：定义一个MyList接口，并使用数组的方法来实现接口"><a href="#第二关：定义一个MyList接口，并使用数组的方法来实现接口" class="headerlink" title="第二关：定义一个MyList接口，并使用数组的方法来实现接口"></a>第二关：定义一个MyList接口，并使用数组的方法来实现接口</h2><h3 id="任务描述-1"><a href="#任务描述-1" class="headerlink" title="任务描述"></a>任务描述</h3><p>要求：</p><ol><li>MyList接口包含六个方法：         void add(Object obj)：往列表尾部添加对象         Object get(int index)：从列表中获取索引为i的对象         void clear()：清空所有的对象         boolean isEmpty()：判断列表中是否有对象         int size()：获取列表中对象的个数         int capacity()：所分配的空间大小</li><li>MyObjectArray类实现MyList接口，内部以数组的方式实现，要求：         构造函数MyObjectArray(int incSize)：参数incSize为数组初始化大小和空间的增量。若用户调用incSize非法，则设为默认值5。         当调用add()方法往试图往MyObjectArray中增加对象时，如果内部数组已满，则增加数组大小，增量为incSize。         调用clear()方法可以清空所有通过add()方法加入的对象。         调用get(int index)方法时，如果传入的参数非法，则返回null对象，否则返回对应的对象。</li><li>MyDoubleArray类也实现ReList接口，内部依旧通过数组实现，要求：         构造函数MyDoubleArray(int initSize)：参数initSize表示数组的初始化大小。若用户调用initSize非法，则设为默认值10。         当调用add()方法往MyDoubleArray列表里面增加对象时，如果其内部数组已满，则将数组的长度变为当前长度的2倍。         其他方法和MyObjectArray一致</li></ol><p>最后设计一个类来测试你的MyObjectArray和MyDoubleArray类，看看这两个类是否能在不破坏使用者代码的情况下相互替换。 ####提示： 增加数组长度的方法：使用java.util.Arrays.copyOf()方法，用法请查阅Java API文档。</p><h3 id="提示：-1"><a href="#提示：-1" class="headerlink" title="提示："></a>提示：</h3><p>这关有两个需要注意的地方：<br>1.<strong>MyDoubleArray类的数组类型依然得是Object类型，不能是Double类型</strong>，不然还得报错，但这就是这道出的不好的地方，你只需要对前面一个类的代码修改几下就行了，两个类的区别不大，完全就是重复操作，没意思。<br>2.<strong>clear函数需要把数组的长度重置</strong>。</p><h3 id="源码：-1"><a href="#源码：-1" class="headerlink" title="源码："></a>源码：</h3><h4 id="MyList-java"><a href="#MyList-java" class="headerlink" title="MyList.java"></a>MyList.java</h4><pre><code class="java">package step1;//在此写接口MyListpublic interface MyList &#123;    public void add(Object obj);    public Object get(int index);    public void clear();    public boolean isEmpty();    public int size();    public int capacity();&#125;</code></pre><h4 id="MyObjectArray-java"><a href="#MyObjectArray-java" class="headerlink" title="MyObjectArray.java"></a>MyObjectArray.java</h4><pre><code class="java">package step1;import java.util.Arrays;//在此写MyObjectArray类public class MyObjectArray implements MyList &#123;        private  Object[] list;     private int size,incSize;        public MyObjectArray(int incSize) &#123;        if(incSize&lt;=0) &#123;            this.incSize=5;        &#125;else &#123;            this.incSize=incSize;        &#125;        list=new Object[this.incSize];        size=0;    &#125;        @Override    public void add(Object obj) &#123;        // TODO 自动生成的方法存根        if(size==list.length) &#123;            list=Arrays.copyOf(list, list.length+this.incSize);        &#125;        list[size++]=obj;        &#125;        @Override    public Object get(int index) &#123;        // TODO 自动生成的方法存根        if(index&gt;=0&amp;&amp;index&lt;size) &#123;            return list[index];        &#125;else&#123;            return null;        &#125;    &#125;    @Override    public void clear() &#123;        // TODO 自动生成的方法存根        list=new Object[5];        size=0;    &#125;    @Override    public boolean isEmpty() &#123;        // TODO 自动生成的方法存根        if(size==0) &#123;            return true;        &#125;else &#123;            return false;        &#125;    &#125;    @Override    public int size() &#123;        // TODO 自动生成的方法存根        return size;    &#125;    @Override    public int capacity() &#123;        // TODO 自动生成的方法存根        return list.length;    &#125;&#125;</code></pre><h4 id="MyDoubleArray-java"><a href="#MyDoubleArray-java" class="headerlink" title="MyDoubleArray.java"></a>MyDoubleArray.java</h4><pre><code class="java">package step1;import java.util.Arrays;//在此写MyDoubleArray类public class MyDoubleArray implements MyList &#123;    private  Object[] list;     private int size;        public MyDoubleArray(int initSize) &#123;        if(initSize&lt;=0) &#123;            initSize=10;        &#125;        list=new Object[initSize];        size=0;    &#125;    @Override    public void add(Object obj) &#123;        // TODO 自动生成的方法存根        if(size==list.length) &#123;            list=Arrays.copyOf(list, list.length*2);        &#125;        list[size++]= obj;    &#125;    @Override    public Object get(int index) &#123;        // TODO 自动生成的方法存根        if(index&gt;=0&amp;&amp;index&lt;size) &#123;            return list[index];        &#125;else&#123;            return null;        &#125;    &#125;    @Override    public void clear() &#123;        // TODO 自动生成的方法存根        list=new Object[10];        size=0;    &#125;    @Override    public boolean isEmpty() &#123;        // TODO 自动生成的方法存根        if(size==0) &#123;            return true;        &#125;else &#123;            return false;        &#125;    &#125;    @Override    public int size() &#123;        // TODO 自动生成的方法存根        return size;    &#125;    @Override    public int capacity() &#123;        // TODO 自动生成的方法存根        return list.length;    &#125;&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;第一关：接口练习&quot;&gt;&lt;a href=&quot;#第一关：接口练习&quot; class=&quot;headerlink&quot; title=&quot;第一关：接口练习&quot;&gt;&lt;/a&gt;第一关：接口练习&lt;/h2&gt;&lt;h3 id=&quot;任务描述&quot;&gt;&lt;a href=&quot;#任务描述&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="头歌" scheme="http://example.com/categories/%E5%A4%B4%E6%AD%8C/"/>
    
    
    <category term="easy" scheme="http://example.com/tags/easy/"/>
    
  </entry>
  
  <entry>
    <title>归并排序</title>
    <link href="http://example.com/2021/11/08/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/"/>
    <id>http://example.com/2021/11/08/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/</id>
    <published>2021-11-08T12:43:11.000Z</published>
    <updated>2021-11-08T14:03:11.997Z</updated>
    
    <content type="html"><![CDATA[<h1 id="琪露诺的排序"><a href="#琪露诺的排序" class="headerlink" title="琪露诺的排序"></a>琪露诺的排序</h1><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>依旧是OJ上的门槛题，当作复习用。这题主要考察的是排序里面的归并排序。</p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>笨蛋琪露诺喜欢用冰块搭积木。这天她用她的能力制造了N根冰柱作为材料，但这些冰柱显得参差不齐，不过好在她知道这些冰柱的高度。患有强迫症的小妖精琪露诺决定将这N根冰柱从小到大排列，不幸的是，琪露诺是个笨蛋，她只能将相邻的两根冰柱调换位置。现在她想知道她最少需要进行几次调换才能使这些冰柱变得有序。</p><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>输入共两行。<br>第一行N(0&lt;N&lt;=500000)，代表冰柱的个数。<br>第二行N个数，代表每根冰柱的高度hi(0&lt;hi&lt;2^32)</p><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>一个整数，代表琪露诺最少的调换次数。</p><h2 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1"></a>Sample Input 1</h2><pre><code class="c++">44 3 2 1</code></pre><h2 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1"></a>Sample Output 1</h2><pre><code class="C++">6</code></pre><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><p>为什么前面说这题一定要用归并排序呢，因为如果你不这样，<strong>用别的方法，比如冒泡排序什么什么的，你会发现超时了，因为他们的时间复杂度都是O(n2),而归并排序的时间复杂度只有O(N*log2N) 且非常稳定。</strong>这题的解法只需要在归并排序的基础代码上改一些就行了，这里先解释归并排序是怎么实现的。</p><h3 id="归并排序分为两步："><a href="#归并排序分为两步：" class="headerlink" title="归并排序分为两步："></a>归并排序分为两步：</h3><h4 id="1-分"><a href="#1-分" class="headerlink" title="1.分"></a>1.分</h4><p>(1)我们会得到一个长为N的数组，起始位置为low，末位置为high。<br>(2)判断low是否对于high。<br>(3)是则退出。<br>(4)否则令mid为low和high的中点，递归调用“分”函数，mid分别作为两个函数的末位置和起始位置。<br>(5)即为继续第一步</p><h4 id="2-并"><a href="#2-并" class="headerlink" title="2.并"></a>2.并</h4><p><strong>每次分完之后都会并一次，顺序自定义，由于分是递归调用的，所以先合并的是两个长度为1的数组，而后就是两长度为2的数组合并，直到数组对半合并</strong></p><p><img src="https://cdn.jsdelivr.net/gh/QshuRyaoF/MyPictureBed@master/img/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F.jpg" alt="归并排序"></p><h3 id="改进："><a href="#改进：" class="headerlink" title="改进："></a>改进：</h3><p>为了完成这道题目的要求仅仅这样还是不行的，我们需要一点小改动，我们需要改进的地方只有计算逆序对的方法，有上面概念可知，在并这个过程这，两个数组都是有序的，所以<strong>当第一个序列的第x个数比第二个序列的第y个数大时，就产生了N-x+1个逆序对，这在排序过程中就可以进行统计。</strong></p><h2 id="源码："><a href="#源码：" class="headerlink" title="源码："></a>源码：</h2><pre><code class="c++">#include&lt;iostream&gt;using namespace std;long long int sum=0;//并函数void merge(long long int a[],long long int b[],int low,int mid,int high)&#123;    int i=low,j=mid+1,k=low;    while(i&lt;=mid&amp;&amp;j&lt;=high)&#123;        if(a[i]&lt;=a[j])&#123;            b[k++]=a[i++];        &#125;else&#123;            b[k++]=a[j++];            sum+=mid-i+1;        &#125;    &#125;    while(i&lt;=mid)&#123;        b[k++]=a[i++];    &#125;    while(j&lt;=high)&#123;        b[k++]=a[j++];    &#125;    for(int i=low;i&lt;=high;i++)&#123;        a[i]=b[i];    &#125;&#125;//分函数void msort(long long int a[],long long int b[],int low,int high)&#123;    if(low==high)&#123;        b[low]=a[low];    &#125;else&#123;        int mid=(low+high)/2;        msort(a,b,low,mid);        msort(a,b,mid+1,high);        merge(a,b,low,mid,high);    &#125;&#125;int  main()&#123;    int n;    cin&gt;&gt;n;    long long int a[n],b[n];    for(int i=0;i&lt;n;i++)&#123;        cin&gt;&gt;a[i];    &#125;    msort(a,b,0,n-1);    cout&lt;&lt;sum;    return 0;&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;琪露诺的排序&quot;&gt;&lt;a href=&quot;#琪露诺的排序&quot; class=&quot;headerlink&quot; title=&quot;琪露诺的排序&quot;&gt;&lt;/a&gt;琪露诺的排序&lt;/h1&gt;&lt;h2 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：</summary>
      
    
    
    
    <category term="ACM" scheme="http://example.com/categories/ACM/"/>
    
    
    <category term="common" scheme="http://example.com/tags/common/"/>
    
  </entry>
  
  <entry>
    <title>取数组合——判断素数</title>
    <link href="http://example.com/2021/11/07/N%E4%B8%AA%E6%95%B0%E4%B8%AD%E5%8F%96k%E4%B8%AA%E6%95%B0/"/>
    <id>http://example.com/2021/11/07/N%E4%B8%AA%E6%95%B0%E4%B8%AD%E5%8F%96k%E4%B8%AA%E6%95%B0/</id>
    <published>2021-11-07T14:48:11.000Z</published>
    <updated>2021-11-07T15:08:24.566Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>马上ACM要考核了，我也开始复习我在OJ上做过的门槛题，看到了这个挺难的题，说实话，当时我没写出来这道题，我还是去社区搜了一下才找到解法的，要用到DFS，属于数据结构图论里面的算法，确实比较难。</p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>组长特别想让小学妹进组，但是现在在所有新生中有一些是假扮的小学妹，为了知道那些是真正的小学妹，组长想到了一个好办法：<br><strong>已知n个整数b1,b2,…,bn,他们分别代表所有的新生,以及一个整数k（k＜n）。</strong><br><strong>从n个整数中任选k个整数相加，可分别得到一系列的和。</strong><br>例如当n=4，k＝3，4个整数分别为3，7，12，19时，可得全部的组合与它们的和为：<br>3＋7＋12=22，3＋7＋19＝29，7＋12＋19＝38，3＋12＋19＝34。<br>只有当他们的和是素数的时候，他们的真实身份才会显现，你的任务就是算出一共有几组满足条件的组合。<br>例如上例，只有一种组合为素数：3＋7＋19＝29。</p><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>第一行两个整数：n , k 。（1&lt;=n&lt;=20，k＜n）<br>第二行n个整数：x1,x2，…,xn 。（1&lt;=xi&lt;=5000000）</p><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>一个整数（满足条件的方案数）。</p><h3 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1"></a>Sample Input 1</h3><pre><code class="c++">4 33 7 12 19</code></pre><h3 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1"></a>Sample Output 1</h3><pre><code class="c++">1</code></pre><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><p>由于N和K都是不确定的，所以我们没法写出具体多少个循环来算，只能用递归。每递归一次，参数K就减小1，当K等于0时，判断sum的值是否为素数，是的话答案加1。思路其实就是这样，看起来简单，但理清并写出来确实有点难，但我相信聪明的你看完我的源码后能自己写出来。</p><h2 id="源码："><a href="#源码：" class="headerlink" title="源码："></a>源码：</h2><pre><code class="c++">#include&lt;iostream&gt;#include&lt;math.h&gt;#include&lt;stdlib.h&gt;using namespace std;int count=0;//输出的答案//判断n是否是素数，应该都写过很多次了，就不解释了int judge(int n)&#123;    int m=sqrt(n);    for(int i=2;i&lt;=m;i++)&#123;        if(n%i==0)&#123;            return 0;//否        &#125;    &#125;    return 1;//是&#125;//递归体，使用了DFS的思路void opera(int *num,int n/*总数*/,int k/*取K个数*/,int sum/*所求和*/,int s/*开始处*/)&#123;    if(k==0)&#123;//即已经取出了k个数并求和        if(judge(sum))&#123;            count++;            return ;        &#125;    &#125;    else&#123;        int i;        for(i=s;i&lt;n;++i)&#123;//从开始依次处取数            opera(num,n,k-1,sum+num[i],i+1);        &#125;    &#125;&#125;//主函数int main()&#123;    int n,k;    cin&gt;&gt;n&gt;&gt;k;    int num[n];    for(int i=0;i&lt;n;i++)&#123;        cin&gt;&gt;num[i];    &#125;    opera(num,n,k,0,0);    cout&lt;&lt;count&lt;&lt;endl;    return 0;&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h2&gt;&lt;p&gt;马上ACM要考核了，我也开始复习我在OJ上做过的门槛题，看到了这个挺难的题，说实话，当时我没写出来这道题，我还是去社区搜了一下才找到</summary>
      
    
    
    
    <category term="ACM" scheme="http://example.com/categories/ACM/"/>
    
    
    <category term="difficult" scheme="http://example.com/tags/difficult/"/>
    
  </entry>
  
  <entry>
    <title>字符串的减法A-B</title>
    <link href="http://example.com/2021/11/06/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%87%8F%E6%B3%95A-B/"/>
    <id>http://example.com/2021/11/06/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%87%8F%E6%B3%95A-B/</id>
    <published>2021-11-05T16:02:23.000Z</published>
    <updated>2021-11-05T16:37:15.502Z</updated>
    
    <content type="html"><![CDATA[<h1 id="A-B"><a href="#A-B" class="headerlink" title="A-B"></a>A-B</h1><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>前几天是半期考试，没错我这个学校有半期考试。因为我学的比较烂，所以复习花了好多时间，没有时间更新博客，以后我尽量做到日更，谢谢大家的支持。</p><h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><p>本题要求你计算<em>A</em>−<em>B</em>。不过麻烦的是，<em>A</em>和<em>B</em>都是字符串 —— 即从字符串<em>A</em>中把字符串<em>B</em>所包含的字符全删掉，剩下的字符组成的就是字符串<em>A</em>−<em>B</em>。</p><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入在2行中先后给出字符串<em>A</em>和<em>B</em>。两字符串的长度都不超过104，并且保证每个字符串都是由可见的ASCII码和空白字符组成，最后以换行符结束。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>在一行中打印出<em>A</em>−<em>B</em>的结果字符串。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><pre><code class="in">I love GPLT!  It&#39;s a fun game!aeiou结尾无空行！</code></pre><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><pre><code class="out">I lv GPLT!  It&#39;s  fn gm!结尾无空行！</code></pre><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><p>这题的解法非常多，最简单的就是暴力写法了，对主串A的每一个字符做循环遍历模式串B中的字符，看是否相等，相等就不输出。但暴力解法的时间复杂度为N*N，而N的值可能很大，而这题的时间限制是在140ms内跑完，很有因为可能超时而不过，所以我们需要换一个办法。<br><strong>这里我用的是空间换时间的思想，我们另外开辟一个Boolean类型的一维数组，大小为52，我们可以用这个数组来存储B中出现过的字符</strong>，比如B=”aB”，则只有boo[0]和bool[26]为true，其他的都为false。这样我们对于A中的字符只需要遍历一遍就可以知道是不是需要输出，true表示不输出，false表示输出，所以代码的空间复杂度只有N了。<br>但后面我发现串B中可能不止有字母，可能还要一些特殊字符，比如’!’,’ ‘,’?’，所以还需要一个字符数组来存储出现过的特殊字符，但由于特殊字符是比较少的，所以对这个数组进行遍历花不了多少时间，而且我们可以将这种情况放在判断语句的最后，这样下来，代码的时间复杂度在串很长时依然接近N，这样这道题就写出来了。</p><h2 id="源码："><a href="#源码：" class="headerlink" title="源码："></a>源码：</h2><pre><code class="c++">#include&lt;iostream&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;using namespace std;//判断A的特殊字符是否在B中存在bool judge(char a,char b[],int c)&#123;    for(int i=0;i&lt;c;i++)&#123;        if(a==b[i])&#123;            return false;        &#125;    &#125;    return true;&#125;int main()&#123;    string a,b;//a为主串，b为模式串    char special[100];//由于存储b中出现过的特殊字符    int flag=0;    bool word[52];//存储b中出现过的字母，成表    memset(word,false,sizeof(word));//将表全置空，也就是false    getline(cin,a);    getline(cin,b);    //对表进行初始化    for(int i=0;i&lt;b.length();i++)&#123;        if(b[i]&gt;=&#39;a&#39;&amp;&amp;b[i]&lt;=&#39;z&#39;)&#123;            word[b[i]-&#39;a&#39;]=true;        &#125;else if(b[i]&gt;=&#39;A&#39;&amp;&amp;b[i]&lt;=&#39;Z&#39;)&#123;            word[b[i]-&#39;A&#39;+26]=true;        &#125;else&#123;            special[flag]=b[i];            flag++;        &#125;    &#125;    //对a进行遍历，并对表进行随机查找    for(int i=0;i&lt;a.length();i++)&#123;        if(a[i]&gt;=&#39;a&#39;&amp;&amp;a[i]&lt;=&#39;z&#39;)&#123;            if(!word[a[i]-&#39;a&#39;])&#123;                cout&lt;&lt;a[i];            &#125;        &#125;else if(a[i]&gt;=&#39;A&#39;&amp;&amp;a[i]&lt;=&#39;Z&#39;)&#123;            if(!word[a[i]-&#39;A&#39;+26])&#123;                cout&lt;&lt;a[i];            &#125;        &#125;else&#123;            if(judge(a[i],special,flag))&#123;//判断是否是b中的特殊字符                cout&lt;&lt;a[i];            &#125;        &#125;    &#125;    return 0;&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;A-B&quot;&gt;&lt;a href=&quot;#A-B&quot; class=&quot;headerlink&quot; title=&quot;A-B&quot;&gt;&lt;/a&gt;A-B&lt;/h1&gt;&lt;h2 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h</summary>
      
    
    
    
    <category term="日常" scheme="http://example.com/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="easy" scheme="http://example.com/tags/easy/"/>
    
  </entry>
  
  <entry>
    <title>分类与标签功能已开启</title>
    <link href="http://example.com/2021/11/01/%E5%88%86%E7%B1%BB%E4%B8%8E%E6%A0%87%E7%AD%BE/"/>
    <id>http://example.com/2021/11/01/%E5%88%86%E7%B1%BB%E4%B8%8E%E6%A0%87%E7%AD%BE/</id>
    <published>2021-11-01T12:42:10.000Z</published>
    <updated>2021-11-01T12:43:02.024Z</updated>
    
    
    
    
    <category term="通知" scheme="http://example.com/categories/%E9%80%9A%E7%9F%A5/"/>
    
    
    <category term="notice" scheme="http://example.com/tags/notice/"/>
    
  </entry>
  
  <entry>
    <title>头歌 数据结构 实训四——串</title>
    <link href="http://example.com/2021/11/01/%E5%A4%B4%E6%AD%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E8%AE%AD%E5%9B%9B/"/>
    <id>http://example.com/2021/11/01/%E5%A4%B4%E6%AD%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E8%AE%AD%E5%9B%9B/</id>
    <published>2021-11-01T11:56:11.000Z</published>
    <updated>2021-11-04T01:41:57.076Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h3><p>花了20分钟作业写的三道题，没什么难度可言，这里就不详细解答了，<strong>只给出要求填写的函数代码</strong>(其中的乱码是中文，可以是编译格式问题导致的，不影响代码)。</p><h3 id="第一关：求子串"><a href="#第一关：求子串" class="headerlink" title="第一关：求子串"></a>第一关：求子串</h3><pre><code class="c++">void SubStr(SString t, SString s,int i,int len)//从s的第i个字符开始截取长度为len的子串存入t中。//其中1≦i≦串s的长度, 0≦len≦ 串s的长度-i+1。//若i和len超出取值范围，则输出&quot;error&quot;；否则输出子串t。&#123;    // 请在这里补充代码，完成本关任务    /********** Begin *********/    int j=0;    if(i&lt;1||i&gt;s[0]||len&lt;0||len&gt;s[0]-i+1)&#123;        printf(&quot;error\n&quot;);     &#125;else if(len==0)&#123;        printf(&quot;&quot;);    &#125;else&#123;        for(j=i;j&lt;i+len;j++)&#123;            t[j-i]=s[j];        &#125;        t[j+1]=&#39;\0&#39;;        printf(&quot;%s&quot;,t);    &#125;    /********** End **********/&#125;</code></pre><h3 id="第二关：串的模式匹配之简单算法"><a href="#第二关：串的模式匹配之简单算法" class="headerlink" title="第二关：串的模式匹配之简单算法"></a>第二关：串的模式匹配之简单算法</h3><pre><code class="c++">int StrIndex_BF(SString s, SString t, int pos)//´ÓÖ÷´®sµÄµÚpos¸ö×Ö·û¿ªÊ¼²éÕÒ×Ó´®t¡£//ÈôÕÒµ½£¬Ôò·µ»Ø×Ó´®tÔÚÖ÷´®sÖÐµÚÒ»´Î³öÏÖµÄÎ»ÖÃ£¬·ñÔò·µ»Ø0¡£&#123;    // ÇëÔÚÕâÀï²¹³ä´úÂë£¬Íê³É±¾¹ØÈÎÎñ    /********** Begin *********/    int m=s[0];int n=t[0];    char tmp=s[1];    for(int i=1;i&lt;=m-n;i++)&#123;        for(int j=0;j&lt;n;j++)&#123;            if(s[i+j]!=t[j+1])&#123;                break;            &#125;else&#123;                if(j==n-1)&#123;                    return i;                &#125;            &#125;        &#125;    &#125;    return 0;    /********** End **********/&#125;</code></pre><h3 id="第三关：串的模式匹配之KMP算法"><a href="#第三关：串的模式匹配之KMP算法" class="headerlink" title="第三关：串的模式匹配之KMP算法"></a>第三关：串的模式匹配之KMP算法</h3><pre><code class="c++">void GetNext(SString t, int next[])//ÇóÄ£Ê½´®TµÄnextÖµ²¢´æÈënextÊý×éÖÐ&#123;    // ÇëÔÚÕâÀï²¹³ä´úÂë£¬Íê³É±¾¹ØÈÎÎñ    /********** Begin *********/    int j=1;int i=0;next[1]=0;    while(j&lt;=t[0])&#123;        if(i==0||t[j]==t[i])&#123;            i++;j++;            next[j]=i;        &#125;else&#123;            i=next[i];        &#125;    &#125;    /********** End   *********/&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h3&gt;&lt;p&gt;花了20分钟作业写的三道题，没什么难度可言，这里就不详细解答了，&lt;strong&gt;只给出要求填写的函数代码&lt;/strong&gt;(其中的乱</summary>
      
    
    
    
    <category term="头歌" scheme="http://example.com/categories/%E5%A4%B4%E6%AD%8C/"/>
    
    
    <category term="easy" scheme="http://example.com/tags/easy/"/>
    
  </entry>
  
  <entry>
    <title>评论区已开启</title>
    <link href="http://example.com/2021/10/31/%E8%AF%84%E8%AE%BA%E5%8C%BA/"/>
    <id>http://example.com/2021/10/31/%E8%AF%84%E8%AE%BA%E5%8C%BA/</id>
    <published>2021-10-31T12:50:43.000Z</published>
    <updated>2021-11-01T12:40:43.994Z</updated>
    
    <content type="html"><![CDATA[<h4 id="评论区已经开始试运行，由于没有通知功能，所以我并不能及时的知道你们的评论，而我又很难有空去翻每一篇文章的评论区，看是否有新的问题，所以希望有问题的评论完后可以QQ和我说一下，谢谢。"><a href="#评论区已经开始试运行，由于没有通知功能，所以我并不能及时的知道你们的评论，而我又很难有空去翻每一篇文章的评论区，看是否有新的问题，所以希望有问题的评论完后可以QQ和我说一下，谢谢。" class="headerlink" title="评论区已经开始试运行，由于没有通知功能，所以我并不能及时的知道你们的评论，而我又很难有空去翻每一篇文章的评论区，看是否有新的问题，所以希望有问题的评论完后可以QQ和我说一下，谢谢。"></a>评论区已经开始试运行，由于没有通知功能，所以我并不能及时的知道你们的评论，而我又很难有空去翻每一篇文章的评论区，看是否有新的问题，所以希望有问题的评论完后可以QQ和我说一下，谢谢。</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;评论区已经开始试运行，由于没有通知功能，所以我并不能及时的知道你们的评论，而我又很难有空去翻每一篇文章的评论区，看是否有新的问题，所以希望有问题的评论完后可以QQ和我说一下，谢谢。&quot;&gt;&lt;a href=&quot;#评论区已经开始试运行，由于没有通知功能，所以我并不能及时的知</summary>
      
    
    
    
    <category term="通知" scheme="http://example.com/categories/%E9%80%9A%E7%9F%A5/"/>
    
    
    <category term="notice" scheme="http://example.com/tags/notice/"/>
    
  </entry>
  
  <entry>
    <title>汉英词典</title>
    <link href="http://example.com/2021/10/29/%E6%B1%89%E8%8B%B1%E8%AF%8D%E5%85%B8/"/>
    <id>http://example.com/2021/10/29/%E6%B1%89%E8%8B%B1%E8%AF%8D%E5%85%B8/</id>
    <published>2021-10-28T16:33:11.000Z</published>
    <updated>2021-11-13T16:47:38.602Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h3><p>我的大一下学期实训项目是好记星移动词典，基本功能是已知中文找英文，已知英文找中文，还要词典词条的增删查改，由于前俩天我就实现了这些功能，于是在之后我又增添了一个登录系统，虽然好像用处不大，但也还是我第一次写这种多文件互动的项目，写的比较用心，下面将附上项目源代码，和<a href="https://github.com/QshuRyaoF/ECdicttionary/tree/main/Dictionary">文件下载链接</a>(文件是公开在本人的Github上的，有需要的可以随时取用,<strong>其中有7个文件，只要全都下载时，项目才能正常运行，且项目是通过main.c启动的</strong>)。</p><h3 id="运行效果图："><a href="#运行效果图：" class="headerlink" title="运行效果图："></a>运行效果图：</h3><p><img src="https://cdn.jsdelivr.net/gh/QshuRyaoF/MyPictureBed@master/img/image-20211029005243741.png" alt="image-20211029005243741"></p><h3 id="Main-c"><a href="#Main-c" class="headerlink" title="Main.c"></a>Main.c</h3><pre><code class="c">#include &lt;stdio.h&gt;#include &lt;conio.h&gt;#include &lt;string.h&gt;#include &lt;stdlib.h&gt;#include &quot;function.h&quot;#include &quot;dictionary.c&quot;  int main(int argc,char **argv)&#123;    printf(&quot;\033[;36;5m ******************************************** \033[0m\n&quot;);    printf(&quot;\033[;36;5m *               电子词典项目               * \033[0m\n&quot;);    printf(&quot;\033[;36;5m ******************************************** \033[0m\n&quot;);    printf(&quot;\033[;36;5m *     1. 注册     2. 登录     3. 退出      * \033[0m\n&quot;);    printf(&quot;\033[;36;5m ******************************************** \033[0m\n&quot;);    int choice,flag;    char FILENAME[20]=&quot;user.txt&quot;;    read(user,&amp;numofuser,FILENAME);    printf(&quot;请输入：&quot;);    scanf(&quot;%d&quot;,&amp;choice);    switch (choice)    &#123;    case 1:sign_in(&amp;numofuser,FILENAME,user);        break;    case 2:login(&amp;numofuser,user);        break;    case 3:printf(&quot;\033[;31;5m   即将退出，欢迎您再次使用！  \033[0m\n&quot;);        break;    default:printf(&quot;\033[;31;5m   输入错误，请重新输入！！！  \033[0m\n&quot;);        break;    &#125;    return 0;&#125;//统计函数void read(struct userlist user[],int *numofuser,char filename[])&#123;    FILE *fp;    fp=fopen(filename,&quot;r&quot;);    if(fp!=NULL)&#123;        while(!feof(fp))&#123;            fscanf(fp,&quot;%s %s %d&quot;,&amp;user[*numofuser].name,&amp;user[*numofuser].pwd,&amp;user[*numofuser].numofmemwd);            (*numofuser)++;        &#125;    &#125;else&#123;        printf(&quot;\033[;31;5m文件读取失败！！！ \033[0m\n&quot;);    &#125;    fclose(fp);&#125;//注册函数void sign_in(int *numofuser,char filename[],struct userlist user[])&#123;    char keyn[10],keyp1[20],keyp2[20];    printf(&quot;用户名：&quot;);    scanf(&quot;%s&quot;,&amp;keyn);    for(int i=0;i&lt;*numofuser;i++)&#123;        if(strcmp(user[i].name,keyn)==0)&#123;            printf(&quot;\033[;31;5m    该用户已经注册,请登录！\033[0m\n&quot;);            sign_in(&amp;(*numofuser),filename,user);            return;        &#125;    &#125;    printf(&quot;密  码：&quot;);    int i = 0;    char c;    while (1)    &#123;        //getch()这个函数是一个不回显函数，当用户按下某个字符时，函数自动读取，无需按回车        //函数用途：从控制台读取一个字符，但不显示在屏幕上        c = getch();        //如果按下Esc键可以退出        if((c-48) == (-21))&#123;            printf(&quot;\n\033[;31;1m      退出成功！     \033[0m\n&quot;);                return;        &#125;        //windows平台下按下回车（ENTER）键会产生两个转义字符 \r\n，因此getch返回13(\r)，        //                而&#39;\n‘的的转义字符无法读取，因此无法通过判断&#39;\n&#39;的方式结束输入，        //可以通过读取第一个转义字符进行判断结束输入        if (c == &#39;\r&#39;)//按下回车键时结束输入，退出        &#123;            keyp1[i] = &#39;\0&#39;;            break;        &#125;        if (c == &#39;\b&#39;)//遇到退格键时（←Backsapce)        &#123;            //当没有输入密码时，即输入的密码为空时，不进行任何操作            //即输入的密码不为空时，对显示的字符进行退格            if (i &gt; 0)             &#123;                 i--;                //对显示的字符进行退格，两个\b之间存在一个空格                printf(&quot;\b \b&quot;);                                        keyp1[i] = &#39;\0&#39;;//修改输入的字符                continue;            &#125;        &#125;        else//没有遇到回车键时和退格键时，读取输入的密码存储在字符串password中        &#123;            printf(&quot;*&quot;);    //对输入的密码在控制台显示*号            keyp1[i] = c;//存储输入的字符                    if (i &lt; 20) i++;            else break;        &#125;    &#125;    printf(&quot;\n&quot;);    if (i &gt; 0) ;    else  printf(&quot;输入的密码为空&quot;);    printf(&quot;请确认密码&quot;);    int j = 0;    char d;    while (1)    &#123;        d = getch();        if((d-48) == (-21))&#123;            printf(&quot;\n\033[;31;1m      退出成功！     \033[0m\n&quot;);            return;        &#125;        if (d == &#39;\r&#39;)        &#123;            keyp2[j] = &#39;\0&#39;;            break;        &#125;        if (d == &#39;\b&#39;)        &#123;            if (j &gt; 0)             &#123;                 j--;                printf(&quot;\b \b&quot;);                    keyp2[j] = &#39;\0&#39;;                continue;            &#125;        &#125;        else        &#123;            printf(&quot;*&quot;);            keyp2[j] = d;                if (j &lt; 20) j++;            else break;        &#125;    &#125;         printf(&quot;\n&quot;);    if (j &gt; 0) ;    else  printf(&quot;输入的密码为空&quot;);    if(strcmp(keyp1,keyp2)!=0)&#123;        printf(&quot;\033[;31;5m   两次输入密码不一致，请重新输入! \033[0m\n&quot;);        sign_in(&amp;(*numofuser),filename,user);    &#125;    int flag=0;       strcpy(user[*numofuser].name,keyn);    strcpy(user[*numofuser].pwd,keyp1);    user[*numofuser].numofmemwd=0;    (*numofuser)++;    FILE *fp;    fp=fopen(filename,&quot;w&quot;);    if(fp!=NULL)&#123;        for(int k=0;k&lt;(*numofuser)-1;k++)&#123;            fprintf(fp,&quot;%s %s %d\n&quot;,user[k].name,user[k].pwd,user[k].numofmemwd);        &#125;        fprintf(fp,&quot;%s %s %d&quot;,user[*numofuser-1].name,user[*numofuser-1].pwd,user[*numofuser-1].numofmemwd);    &#125;else&#123;        printf(&quot;文件打开失败\n&quot;);    &#125;    fclose(fp);    printf(&quot;\n\033[;31;5m      %s,恭喜您，注册成功\033[0m\n&quot;,keyn);    printf(&quot;请重新登录！\n&quot;);    login(&amp;(*numofuser),user);    flag=1;          if(flag==0)&#123;        printf(&quot;\033[;31;5m注册失败!!!\033[0m\n&quot;);    &#125;&#125;//登录函数void login(int *numofuser,struct userlist user[])&#123;    char keyn[10],keyp[20];    while(1)&#123;        printf(&quot;用户名：&quot;);        scanf(&quot;%s&quot;,keyn);        printf(&quot;密  码：&quot;);        int i = 0,flag=0;        char c;        while (1)        &#123;            c = getch();            if((c-48) == (-21))&#123;                printf(&quot;\n\033[;31;1m      退出成功！     \033[0m\n&quot;);                return;            &#125;            if (c == &#39;\r&#39;)            &#123;                keyp[i] = &#39;\0&#39;;                break;            &#125;            if (c == &#39;\b&#39;)            &#123;                if (i &gt; 0)                 &#123;                     i--;                    printf(&quot;\b \b&quot;);                        keyp[i] = &#39;\0&#39;;                    continue;                &#125;            &#125;            else            &#123;                printf(&quot;*&quot;);                keyp[i] = c;                    if (i &lt; 20) i++;                else break;            &#125;        &#125;        printf(&quot;\n&quot;);        if (i &gt; 0) ;        else  printf(&quot;输入的密码为空&quot;);        for(int i=0;i&lt;*numofuser;i++)&#123;            if(strcmp(keyn,user[i].name)==0&amp;&amp;strcmp(keyp,user[i].pwd)==0)&#123;                printf(&quot;\n\033[;31;1m      %s,恭喜您，登录成功! \033[0m\n&quot;,keyn);                flag=1;                fakemain(user[i].name);                return;            &#125;        &#125;        if(flag==0)&#123;            printf(&quot;\033[;31;5m     用户名或密码错误，请重新输入!!! \033[0m\n&quot;);                &#125;    &#125; &#125;</code></pre><h3 id="dictionary-c"><a href="#dictionary-c" class="headerlink" title="dictionary.c"></a>dictionary.c</h3><pre><code class="c">#include &lt;stdio.h&gt;#include &lt;string.h&gt;#include &lt;stdlib.h&gt;#include &quot;function.h&quot;//本文件的主函数void fakemain(char name[])&#123;    struct entry ent[10000];    int numofwords = 0, choose;    char FILEPATH[30] = &quot;new_dictionary.txt&quot;;    search(FILEPATH, ent, &amp;numofwords);    UI(&amp;numofwords, ent, FILEPATH, &amp;choose, name);    return;&#125;//查询有多少个词条的功能函数void search(char filepath[], struct entry ent[], int *numofwords)&#123;    FILE *fp;    fp = fopen(filepath, &quot;a+&quot;);    if (fp != NULL)    &#123;        while (!feof(fp))        &#123;            fscanf(fp, &quot;%s %s&quot;, &amp;ent[*numofwords].english, &amp;ent[*numofwords].chinese);            (*numofwords)++;        &#125;    &#125;    else    &#123;        printf(&quot;\033[;31;5m文件读取失败！！！ \033[0m\n&quot;);    &#125;    fclose(fp);&#125;//英译汉功能函数void E2C(int *numofwords, struct entry ent[])&#123;    char key[20];    while (1)    &#123;        printf(&quot;请输入要查询的词(输入0000退出查询)：&quot;);        scanf(&quot;%s&quot;, key);        if (strcmp(key, &quot;0000&quot;) == 0)        &#123;            return;        &#125;        int flag = 0;        for (int i = 0; i &lt; *numofwords; i++)        &#123;            if (strcmp(key, ent[i].english) == 0)            &#123;                printf(&quot;\033[;33;5m\&quot;%s\&quot; 的中文释义为：%s\033[0m\n&quot;, ent[i].english, ent[i].chinese);                flag = 1;                break;            &#125;        &#125;        if (flag == 0)        &#123;            printf(&quot;\033[;31;5m查无此词!!!\033[0m\n&quot;);        &#125;    &#125;&#125;//汉译英功能函数void C2E(int *numofwords, struct entry ent[])&#123;    char key[20];    while (1)    &#123;        printf(&quot;请输入要查询的词(输入0000退出查询):&quot;);        scanf(&quot;%s&quot;, key);        if (strcmp(key, &quot;0000&quot;) == 0)        &#123;            return;        &#125;        int flag = 0;        for (int i = 0; i &lt; *numofwords; i++)        &#123;            if (strstr(ent[i].chinese, key) != NULL)            &#123;                printf(&quot;\033[;33;5m\&quot;%s\&quot; 对应的英文是：\&quot;%s\&quot;\033[0m\n&quot;, ent[i].chinese, ent[i].english);                flag++;            &#125;        &#125;        if (flag == 0)        &#123;            printf(&quot;\033[;31;5m查无此词!!!\033[0m\n&quot;);        &#125;    &#125;&#125;//删除词条功能函数void deleteentry(int *numofwords, struct entry ent[], char filepath[])&#123;    char key[20];    printf(&quot;请输入要删去的词(输入0000退出删除):&quot;);    scanf(&quot;%s&quot;, key);    if (strcmp(key, &quot;0000&quot;) == 0)    &#123;        return;    &#125;    int flag = 0;    for (int i = 0; i &lt; *numofwords; i++)    &#123;        if (strcmp(key, ent[i].english) == 0)        &#123;            for (int j = i; j &lt; (*numofwords) - 1; j++)            &#123;                ent[j] = ent[j + 1];            &#125;            (*numofwords)--;            FILE *fp;            fp = fopen(filepath, &quot;w+&quot;);            if (fp != NULL)            &#123;                for (int k = 0; k &lt; (*numofwords) - 1; k++)                &#123;                    fprintf(fp, &quot;%s %s\n&quot;, ent[k].english, ent[k].chinese);                &#125;                fprintf(fp, &quot;%s %s&quot;, ent[*numofwords].english, ent[*numofwords].chinese);                printf(&quot;\033[;33;5m词条删除成功!\033[0m\n&quot;);            &#125;            else            &#123;                printf(&quot;文件读取失败\n&quot;);            &#125;            fclose(fp);            flag = 1;            break;        &#125;    &#125;    if (flag == 0)    &#123;        printf(&quot;\033[;31;5m查无此词!!!\033[0m\n&quot;);    &#125;&#125;//用户操作界面void UI(int *numofwords, struct entry ent[], char filepath[], int *choose, char name[])&#123;    /*操作界面*/    printf(&quot;\n\033[;33;5m*************************************************\033[0m\n&quot;);    printf(&quot;\033[;33;5m*                欢迎使用电子词典               *\033[0m\n&quot;);    printf(&quot;\033[;33;5m*************************************************\033[0m\n&quot;);    printf(&quot;\033[;33;5m*     1.英译汉      2.汉译英     3.删除词条     *\033[0m\n&quot;);    printf(&quot;\033[;33;5m*     4.添加词条    5.修改词条   6.背单词       *\033[0m\n&quot;);    printf(&quot;\033[;33;5m*               7. 保 存 并 退 出               *\033[0m\n&quot;);    printf(&quot;\033[;33;5m*************************************************\033[0m\n&quot;);    printf(&quot;\033[;33;5m当前字典一共用%d个单词\033[0m\n&quot;, *numofwords);    //用户输入选择    printf(&quot;请输入：&quot;);    scanf(&quot;%d&quot;, &amp;(*choose));    switch (*choose)    &#123;    case 1:        E2C(&amp;(*numofwords), ent);        UI(&amp;(*numofwords), ent, filepath, &amp;(*choose), name);        break;    case 2:        C2E(&amp;(*numofwords), ent);        UI(&amp;(*numofwords), ent, filepath, &amp;(*choose), name);        break;    case 3:        deleteentry(&amp;(*numofwords), ent, filepath);        UI(&amp;(*numofwords), ent, filepath, &amp;(*choose), name);        break;    case 4:        addentry(&amp;(*numofwords), ent, filepath);        UI(&amp;(*numofwords), ent, filepath, &amp;(*choose), name);        break;    case 5:        modientry(&amp;(*numofwords), ent, filepath);        UI(&amp;(*numofwords), ent, filepath, &amp;(*choose), name);        break;    case 6:reciteword(name,user,ent,&amp;numofuser);        UI(&amp;(*numofwords), ent, filepath, &amp;(*choose), name);        break;    case 7:printf(&quot;\033[;31;5m        保存成功,欢迎再次使用!\033[0m\n&quot;);        break;    default:        printf(&quot;\033[;31;5m输入错误，请重新输入!!!\033[0m\n&quot;);        UI(&amp;(*numofwords), ent, filepath, &amp;(*choose), name);        break;    &#125;    return;&#125;//添加词条功能函数void addentry(int *numofwords, struct entry ent[], char filepath[])&#123;    char keye[20], keyc[20];    printf(&quot;请输入要添加的单词(输入0000退出添加):&quot;);    scanf(&quot;%s&quot;, &amp;keye);    if (strcmp(keye, &quot;0000&quot;) == 0)    &#123;        return;    &#125;    for (int i = 0; i &lt; *numofwords; i++)    &#123;        if (strcmp(ent[i].english, keye) == 0)        &#123;            printf(&quot;该词已在单词库中！\n&quot;);            return;        &#125;    &#125;    printf(&quot;请输入中文释义:&quot;);    scanf(&quot;%s&quot;, &amp;keyc);    int flag = 0, tmp;    for (int i = 0; i &lt; *numofwords; i++)    &#123;        if (strcmp(keye, ent[i].english) &gt; 0)        &#123;            tmp = i;        &#125;        else        &#123;            break;        &#125;    &#125;    for (int j = *numofwords - 1; j &gt; tmp; j--)    &#123;        ent[j + 1] = ent[j];    &#125;    strcpy(ent[tmp + 1].english,keye);    strcpy(ent[tmp + 1].chinese,keyc);    (*numofwords)++;    FILE *fp;    fp = fopen(filepath, &quot;w&quot;);    if (fp != NULL)    &#123;        for (int k = 0; k &lt; (*numofwords) - 1; k++)        &#123;            fprintf(fp, &quot;%s %s\n&quot;, ent[k].english, ent[k].chinese);        &#125;        fprintf(fp, &quot;%s %s&quot;, ent[*numofwords - 1].english, ent[*numofwords - 1].chinese);    &#125;    else    &#123;        printf(&quot;文件打开失败\n&quot;);    &#125;    fclose(fp);    printf(&quot;\033[;33;5m添加成功！！！\033[0m\n&quot;);    flag = 1;    if (flag == 0)    &#123;        printf(&quot;添加失败!!!\n&quot;);    &#125;&#125;//修改词条功能函数void modientry(int *numofwords, struct entry ent[], char filepath[])&#123;    char key[20], keye[20], keyc[20];    FILE *fp;    int flag = 0, tmp;    do    &#123;        printf(&quot;请输入要修改的单词(退出修改请输入0000):&quot;);        scanf(&quot;%s&quot;, key);        if (strcmp(key, &quot;0000&quot;) == 0)        &#123;            return;        &#125;        for (int i = 0; i &lt; *numofwords; i++)        &#123;            if (strcmp(key, ent[i].english) == 0)            &#123;                flag = 1;                for (int j = i; j &lt; (*numofwords) - 1; j++)                &#123;                    ent[j] = ent[j + 1];                &#125;                (*numofwords)--;                FILE *fp;                fp = fopen(filepath, &quot;w&quot;);                if (fp != NULL)                &#123;                    for (int k = 0; k &lt; (*numofwords) - 1; k++)                    &#123;                        fprintf(fp, &quot;%s %s\n&quot;, ent[k].english, ent[k].chinese);                    &#125;                    fprintf(fp, &quot;%s %s&quot;, ent[*numofwords].english, ent[*numofwords].chinese);                    break;                &#125;            &#125;        &#125;        if (flag == 0)        &#123;            printf(&quot;\033[;31;5m查无此词！！！\033[0m\n&quot;);        &#125;    &#125; while (!flag);    printf(&quot;请输入修改后的英文和中文(其间请用空格或换行隔开):\n&quot;);    scanf(&quot;%s&quot;, keye);    scanf(&quot;%s&quot;, keyc);    for (int i = 0; i &lt; *numofwords; i++)    &#123;        if (strcmp(ent[i].english, keye) == 0)        &#123;            printf(&quot;\033[;31;5m该词已在单词库中！\033[0m\n&quot;);            return;        &#125;    &#125;    for (int i = 0; i &lt; *numofwords; i++)    &#123;        if (strcmp(keye, ent[i].english) &gt; 0)        &#123;            tmp = i;        &#125;        else        &#123;            break;        &#125;    &#125;    for (int j = *numofwords - 1; j &gt; tmp; j--)    &#123;        ent[j + 1] = ent[j];    &#125;    strcpy(ent[tmp + 1].english, keye);    strcpy(ent[tmp + 1].chinese, keyc);    (*numofwords)++;    fp = fopen(filepath, &quot;w&quot;);    if (fp != NULL)    &#123;        for (int k = 0; k &lt; (*numofwords) - 1; k++)        &#123;            fprintf(fp, &quot;%s %s\n&quot;, ent[k].english, ent[k].chinese);        &#125;        fprintf(fp, &quot;%s %s&quot;, ent[*numofwords - 1].english, ent[*numofwords - 1].chinese);        printf(&quot;\033[;33;5m修改完成!\033[0m\n&quot;);    &#125;    else    &#123;        printf(&quot;文件打开失败\n&quot;);        return;    &#125;    fclose(fp);&#125;//背单词功能函数void reciteword(char name[],struct userlist user[],struct entry ent[],int *numofuser)&#123;    int n, choice, station, m;    FILE *fp;    for (int i = 0; i &lt; *numofuser; i++)    &#123;        if (strcmp(user[i].name, name) == 0)        &#123;            station = user[i].numofmemwd;            m = i;            printf(&quot;\033[;35;5m     您已经背了%d个单词了，继续加油哦~(&#39;.&#39;)~\033[0m\n&quot;, user[i].numofmemwd);        &#125;    &#125;    printf(&quot;\n\033[;34;5m*************************************\033[0m\n&quot;);    printf(&quot;\033[;34;5m*      1.背新单词    2.复习单词     *\033[0m\n&quot;);    printf(&quot;\033[;34;5m*************************************\033[0m\n&quot;);    printf(&quot;请输入：&quot;);    scanf(&quot;%d&quot;, &amp;choice);    switch (choice)    &#123;        case 1:        &#123;            printf(&quot;请输入这次要背的单词数：&quot;);            scanf(&quot;%d&quot;, &amp;n);            for (int i = 0; i &lt; n; i++)            &#123;                printf(&quot;\033[;33;5m   %s %s\033[0m\n&quot;, ent[station + i].english, ent[station + i].chinese);            &#125;            printf(&quot;\033[;33;5m你是最棒的！~(&#39;o&#39;)~\033[0m\n&quot;);            user[m].numofmemwd += n;            fp = fopen(&quot;user.txt&quot;, &quot;w&quot;);            if (fp != NULL)            &#123;                for (int k = 0; k &lt; (*numofuser)-1; k++)                &#123;                    fprintf(fp, &quot;%s %s %d\n&quot;, user[k].name, user[k].pwd, user[k].numofmemwd);                &#125;                fprintf(fp, &quot;%s %s %d&quot;, user[*numofuser - 1].name, user[*numofuser - 1].pwd, user[*numofuser - 1].numofmemwd);            &#125;                else            &#123;                printf(&quot;\033[;31;5m文件读取失败！！！ \033[0m\n&quot;);            &#125;               fclose(fp);        &#125;            break;        case 2:        &#123;            printf(&quot;请输入这次要复习的单词数：&quot;);            scanf(&quot;%d&quot;, &amp;n);            for (int i = 0; i &lt; n; i++)            &#123;                printf(&quot;\033[;33;5m   %s %s\033[0m\n&quot;, ent[station - i - 1].english, ent[station - i - 1].chinese);            &#125;            printf(&quot;\033[;33;5m你是最棒的！~(&#39;o&#39;)~\033[0m\n&quot;);        &#125;            break;        default:printf(&quot;\033[;31;5m输入错误，请重新输入!!!\033[0m\n&quot;);            reciteword(name,user,ent,&amp;(*numofuser));            break;    &#125;&#125;</code></pre><h3 id="function-h"><a href="#function-h" class="headerlink" title="function.h"></a>function.h</h3><pre><code class="c">#include&lt;stdio.h&gt; #ifndef function_h#define function_h#define MAXC 20#define MAXE 20#define total 10000struct entry&#123;    char english[MAXE+1]; //key     char chinese[MAXC+1];    struct entry *next;&#125;;struct userlist&#123;    char name[10];    char pwd[20];    int numofmemwd;&#125;;struct userlist user[1000];int numofuser=0;/*函数声明*/void search(char filepath[],struct entry ent[],int *numofwords);void E2C(int *numofwords,struct entry ent[]);void C2E(int *numofwords,struct entry ent[]);void deleteentry(int *numofwords,struct entry ent[],char filepath[]);void UI(int *numofwords,struct entry ent[],char filepath[],int *choose,char name[]);void addentry(int *numofwords,struct entry ent[],char filepath[]);void modientry(int *numofwords,struct entry ent[],char filepath[]);void fakemain(char name[]);void read(struct userlist user[],int *numofuser,char filename[]);void sign_in(int *numofuser,char filename[],struct userlist user[]);void login(int *numofuser,struct userlist user[]);void reciteword(char name[],struct userlist user[],struct entry ent[],int *numofuser);#endif</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h3&gt;&lt;p&gt;我的大一下学期实训项目是好记星移动词典，基本功能是已知中文找英文，已知英文找中文，还要词典词条的增删查改，由于前俩天我就实现了这些功</summary>
      
    
    
    
    <category term="项目" scheme="http://example.com/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="difficult" scheme="http://example.com/tags/difficult/"/>
    
  </entry>
  
  <entry>
    <title>进制转换函数 itoa() 详解</title>
    <link href="http://example.com/2021/10/28/itoa()%E5%87%BD%E6%95%B0%E5%88%97%E9%A2%98/"/>
    <id>http://example.com/2021/10/28/itoa()%E5%87%BD%E6%95%B0%E5%88%97%E9%A2%98/</id>
    <published>2021-10-28T03:19:11.000Z</published>
    <updated>2021-11-01T12:34:31.644Z</updated>
    
    <content type="html"><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>昨晚深夜忽有一人问我一道题怎么写，是道进制转换的题，一开始我以为很简单，但这道题还是花了我一个小时的时间，而且大部分时间都花在了对于c语言itoa()函数的误解。<br>由该函数的参数列表可知(该函数的定义可以在stdlib.h文件中找到)</p><pre><code class="c">char *__cdecl itoa(int _Val,char *_DstBuf,int _Radix) __MINGW_ATTRIB_DEPRECATED_MSVC2005;</code></pre><p>该函数可以把一个任意的十进制数转换为任意进制的字符串。而且经过debug我发现这个字符串的存储是从高位到低位。而这和下面题目要实现的目标不相符。因为55经过转换后会变成110111，而不是00000000000000000000000000110111 ，所以我们需要对这个字符串进行移位，使其从低地址到高地址排列。而这一部还是很好实现的，只需要写个循环。当一切准备就绪时，我以为我完成了，但没想到啊，-55的转换结果和目标大相径庭，于是我又debug了一次，发现了原因： <strong>itoa()函数最终是通过补码的形式存储结果</strong>。但我以为是用源码存储所以我错了，但知道了这个特性后我很快就写出来了正解，但由于我忘了IEEE754浮点数是啥，所以没写这部分。</p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>32位机器数，输入一个十进制数，转换为二进制数，显示其原码、反码、补码、移码及IEEE754浮点数。</p><p>input 1:</p><p>55</p><p>output 1:</p><p>原码:00000000000000000000000000110111<br>反码:00000000000000000000000000110111<br>补码:00000000000000000000000000110111<br>移码:10000000000000000000000000110111<br>IEEE754浮点数: 01000010010111000000000000000000</p><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><pre><code class="c">#include&lt;stdio.h&gt;#include&lt;string.h&gt;#include&lt;stdlib.h&gt;int main()&#123;    int a,flag,tmp;    scanf(&quot;%d&quot;,&amp;flag);    a=(int)abs(flag);    char b[33],c[33],d[33],e[33],t[33];    itoa(a,t,2);    for(int i=0;i&lt;33;i++)&#123;        if(t[i]==&#39;\0&#39;)&#123;            tmp=i;            break;        &#125;    &#125;    for(int i=0;i&lt;33;i++)&#123;        b[i]=&#39;0&#39;;    &#125;    for(int i=tmp;i&gt;=0;i--)&#123;        b[32-tmp+i]=t[i];    &#125;    if(flag&gt;=0)&#123;        for(int i=0;i&lt;33;i++)&#123;            c[i]=b[i];            d[i]=b[i];            e[i]=b[i];        &#125;        e[0]=&#39;1&#39;;    &#125;else&#123;        itoa(flag,d,2);        b[0]=&#39;1&#39;;        for(int i=1;i&lt;32;i++)&#123;            if(b[i]==&#39;0&#39;)&#123;                c[i]=&#39;1&#39;;            &#125;else&#123;                c[i]=&#39;0&#39;;            &#125;        &#125;        c[0]=&#39;1&#39;;c[32]=&#39;\0&#39;;        for(int i=1;i&lt;32;i++)&#123;            e[i]=d[i];        &#125;        e[0]=&#39;0&#39;;e[32]=&#39;\0&#39;;    &#125;    printf(&quot;%s\n%s\n%s\n%s&quot;,b,c,d,e);    return 0;    &#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h2&gt;&lt;p&gt;昨晚深夜忽有一人问我一道题怎么写，是道进制转换的题，一开始我以为很简单，但这道题还是花了我一个小时的时间，而且大部分时间都花在了对于c语言i</summary>
      
    
    
    
    <category term="日常" scheme="http://example.com/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="easy" scheme="http://example.com/tags/easy/"/>
    
  </entry>
  
  <entry>
    <title>博弈论--矩形内画圆</title>
    <link href="http://example.com/2021/10/27/%E5%8D%9A%E5%BC%88%E8%AE%BA--%E7%9F%A9%E5%BD%A2%E5%86%85%E7%94%BB%E7%94%BB%E5%9C%86/"/>
    <id>http://example.com/2021/10/27/%E5%8D%9A%E5%BC%88%E8%AE%BA--%E7%9F%A9%E5%BD%A2%E5%86%85%E7%94%BB%E7%94%BB%E5%9C%86/</id>
    <published>2021-10-27T06:31:22.000Z</published>
    <updated>2021-11-01T12:37:57.710Z</updated>
    
    <content type="html"><![CDATA[<p>上个月我在写acm的题时，碰到了这么一道题，直到昨天我才把它解出来。</p><h1 id="题名：赢不了的谢强富"><a href="#题名：赢不了的谢强富" class="headerlink" title="题名：赢不了的谢强富"></a>题名：赢不了的谢强富</h1><h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><p>​        某天，谢强富在慕课上看了两个人玩游戏，谢强富对这个游戏很感兴趣，所以他立马拉上了志强一起玩这个游戏。游戏规则如下：首先两个人在一张纸上画了一个长宽分别为A,B的严格的矩形，然后两人依次画半径为R的圆，两人画的圆可以相切但是绝对不允许相交，当其中某一个人无法画出圆的时候，他就输了。谢强富和志强都很聪明。谢强富要首先画圆，但是玩了很多次，谢强富发现自己输多赢少，他想请问你，什么时候他能赢。</p><p>Input</p><p>第一行输入n，代表有n组测试样例。</p><p>每一组测试样例输入矩形的长：A，宽：B，和圆的半径：R。</p><p>Output</p><p>对于每一组测试样例，如果谢强富能赢输出YES,否则输出NO。</p><p>Sample Input 1 </p><pre><code>24 5 65 5 2</code></pre><p>Sample Output 1</p><pre><code class="c++">NOYES</code></pre><h2 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h2><p>​        其实我刚开始拿到这道题时我也很懵，似乎对于每一个案例的解法都是不一样的，而圆的最优位置也无从得知，反正就是想方设法让对手画不下去。<br>​        但片刻思考过后我们都应知道，第一个圆一定是画在矩形的正中心，这样其他空间的最大空白处就是除圆以外的矩形的四个角，而四个角能不能画下另一个圆似乎就要再次计算了，而且计算过程好像还挺复杂的，如果能画下，那别的三个角都能画下了，然后继续计算，角上的圆之间似乎又会产生空隙，我们继续计算最大的空隙是否能再画圆，而且这次的计算过程似乎还和上次不一样，也更复杂了。<br>这样就导致我们对于解题的整体思路不够清晰，写不出来代码。<br>​        上述方法其实是个误区，我们应该这样想，假如A先画，如果能画下去，那么会有四个空位，四个空位如果不能继续画下去，那A就赢了，如果能画下去，那么画的顺序将是B，A，B，A，意思就是如果B能画，那么A也能画，然后还是B画，B又要在剩下的空间里画，如果B能画，由于空间是对称的，所以会有2N的空位画，这样A还是最后画，如此循环，发现最后B肯定会有画不下去的时候。<br>​        所以我们得出结论只要先手的人能画下第一个圆，那么他就已经赢了。</p><h2 id="源码："><a href="#源码：" class="headerlink" title="源码："></a>源码：</h2><pre><code class="c++">#include&lt;iostream&gt;using namespace std;int main()&#123;    int n,a,b,r;    cin&gt;&gt;n;    while(n--)&#123;        cin&gt;&gt;a&gt;&gt;b&gt;&gt;r;        if(2*r&lt;=a&amp;&amp;2*r&lt;=b)&#123;            cout&lt;&lt;&quot;YES&quot;&lt;&lt;endl;        &#125;else&#123;            cout&lt;&lt;&quot;NO&quot;&lt;&lt;endl;        &#125;    &#125;    return 0;&#125;</code></pre><h2 id="心得："><a href="#心得：" class="headerlink" title="心得："></a>心得：</h2><p>莽做题，莽计算是会浪费很多时间的，找到规律，问题就迎刃而解了！</p><p><img src="https://cdn.jsdelivr.net/gh/QshuRyaoF/MyPictureBed@master/img/%E8%A1%8C%E6%94%BF.jpg" alt="行政"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;上个月我在写acm的题时，碰到了这么一道题，直到昨天我才把它解出来。&lt;/p&gt;
&lt;h1 id=&quot;题名：赢不了的谢强富&quot;&gt;&lt;a href=&quot;#题名：赢不了的谢强富&quot; class=&quot;headerlink&quot; title=&quot;题名：赢不了的谢强富&quot;&gt;&lt;/a&gt;题名：赢不了的谢强富&lt;/h1</summary>
      
    
    
    
    <category term="ACM" scheme="http://example.com/categories/ACM/"/>
    
    
    <category term="common" scheme="http://example.com/tags/common/"/>
    
  </entry>
  
  <entry>
    <title>关于BFS的例题</title>
    <link href="http://example.com/2021/10/25/%E5%85%B3%E4%BA%8EBFS%E7%9A%84%E4%BE%8B%E9%A2%98/"/>
    <id>http://example.com/2021/10/25/%E5%85%B3%E4%BA%8EBFS%E7%9A%84%E4%BE%8B%E9%A2%98/</id>
    <published>2021-10-25T04:37:47.000Z</published>
    <updated>2021-11-13T10:07:11.195Z</updated>
    
    <content type="html"><![CDATA[<p>题名：银老板家的电梯</p><p>题目描述</p><p>众所周知银老板是喀兰贸易的老大，银老板家也很有钱，上下楼都要用电梯，但是电梯里面没有按钮，电梯外面有上和下，按上你就会上升mi层，按下你就会下降mi层，即到达i+mi层或者i-mi层，i是你的当前楼层。现在银老板在p层，他想要去t层，请你帮帮银老板他最少需要按多少下按钮可以到达目的地。说不定他就来到你岛了呢？如果你还没有理解题意的话好吧我就举个例子：比如银老板在第2层，想要去第5层，且m依次为4,1,2,3,4;则他最少需要按2次（连续按2次上或者先按1次下再按1次上）才能到达目的地。（楼层&gt;=1）</p><p>输入<br>第一行一个n,p,t（1&lt;=n,p,t&lt;=200）</p><p>第二行n个整数m1,m2…….mn;（0&lt;=mi&lt;=50）</p><p>输出<br>一个整数表示从p层到t层最少需要按多少次。如果不能到达输出-1。</p><p>输入样例 1<br>5 2 5<br>4 1 2 3 4</p><p>输出样例 1<br>2</p><p>输入样例 2<br>6 3 2<br>1 2 3 4 5 6</p><p>输出样例 2<br>-1</p><p>解题思路</p><p>根据题意可知，每层楼对应的下一层选项最多有两个，所以我们采用二维数组来存储每一层的一些信息。再来采用BFS算法，在使用BFS算法时我们需要一个队列，对于已经入队的楼层，我们先检查它是否是我们要达到的楼层，若不是则出列，并且将它的下一层入队，是则直接输出该楼层的循环次数。</p><p>源码</p><h3 id="第一种思路：这是正宗的BFS算法"><a href="#第一种思路：这是正宗的BFS算法" class="headerlink" title="第一种思路：这是正宗的BFS算法"></a>第一种思路：这是正宗的BFS算法</h3><pre><code class="c++">#include&lt;iostream&gt;#include&lt;queue&gt;using namespace std;struct floor&#123;    int pos;    int count;&#125;;const int Max= 201;queue&lt;floor&gt; q;int a[Max];bool b[Max];int M[2]=&#123;1,-1&#125;;int go(int s,int e,int n)&#123;    floor now,next,first;    first.count=0;    first.pos=s;    q.push(first);    b[s]=true;    while(!q.empty())&#123;        now=q.front();        if(now.pos==e)&#123;            return now.count;        &#125;        for(int i=0;i&lt;2;i++)&#123;            int tmp=now.pos+M[i]*a[now.pos];            if(b[tmp]!=true&amp;&amp;tmp&gt;0&amp;&amp;tmp&lt;=n)&#123;                next.pos=tmp;                next.count=now.count+1;                q.push(next);                b[tmp]=true;            &#125;        &#125;        q.pop();    &#125;    return -1;&#125;int main()&#123;    int n,s,e;    cin&gt;&gt;n&gt;&gt;s&gt;&gt;e;    for(int i=1;i&lt;=n;i++)&#123;        cin&gt;&gt;a[i];    &#125;        cout&lt;&lt;go(s,e,n);    return 0;&#125;</code></pre><h3 id="第二种思路：用递归投机取巧"><a href="#第二种思路：用递归投机取巧" class="headerlink" title="第二种思路：用递归投机取巧"></a>第二种思路：用递归投机取巧</h3><pre><code class="c++">#include&lt;iostream&gt;#include&lt;algorithm&gt;using namespace std;const int N=220;int num[N];bool re[N];int n,b=99999,a=0,p,t;void go(int k,int a)&#123;    if(a&gt;b) return;    if(!re[k+num[k]]&amp;&amp;k+num[k]&lt;=n) &#123;        re[k+num[k]]=true;        a++;        go(k+num[k],a);        a--;        re[k+num[k]]=false;    &#125;    if(!re[k-num[k]]&amp;&amp;k-num[k]&gt;0) &#123;        re[k-num[k]]=true;        a++;        go(k-num[k],a);        re[k-num[k]]=false;        a--;            &#125;    if(k==t) b=a;&#125;int main()&#123;    cin&gt;&gt;n&gt;&gt;p&gt;&gt;t;    for(int i=1;i&lt;=n;i++)    cin&gt;&gt;num[i];    re[p]=true;    go(p,0);    if(b==99999)       cout&lt;&lt;-1&lt;&lt;endl;      else       cout&lt;&lt;b&lt;&lt;endl;&#125;</code></pre><p>这是正解。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;题名：银老板家的电梯&lt;/p&gt;
&lt;p&gt;题目描述&lt;/p&gt;
&lt;p&gt;众所周知银老板是喀兰贸易的老大，银老板家也很有钱，上下楼都要用电梯，但是电梯里面没有按钮，电梯外面有上和下，按上你就会上升mi层，按下你就会下降mi层，即到达i+mi层或者i-mi层，i是你的当前楼层。现在银老板在</summary>
      
    
    
    
    <category term="ACM" scheme="http://example.com/categories/ACM/"/>
    
    
    <category term="common" scheme="http://example.com/tags/common/"/>
    
  </entry>
  
  <entry>
    <title>My first blog</title>
    <link href="http://example.com/2021/10/24/My-first-blog/"/>
    <id>http://example.com/2021/10/24/My-first-blog/</id>
    <published>2021-10-24T10:44:47.000Z</published>
    <updated>2021-11-01T12:36:08.460Z</updated>
    
    <content type="html"><![CDATA[<p>恍恍惚惚，现在都大二了，我开始意识到了对于学计算机的，写博客是多么的重要，于是就有了这个网站，希望能和大家一起学习。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;恍恍惚惚，现在都大二了，我开始意识到了对于学计算机的，写博客是多么的重要，于是就有了这个网站，希望能和大家一起学习。&lt;/p&gt;
</summary>
      
    
    
    
    <category term="通知" scheme="http://example.com/categories/%E9%80%9A%E7%9F%A5/"/>
    
    
    <category term="notice" scheme="http://example.com/tags/notice/"/>
    
  </entry>
  
</feed>
